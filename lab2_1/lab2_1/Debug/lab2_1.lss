
lab2_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000a14  00000aa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080010c  0080010c  00000ab4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ae4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000edd  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c5  00000000  00000000  00001ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000835  00000000  00000000  0000237e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00002bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051a  00000000  00000000  00002d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000529  00000000  00000000  0000321e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003747  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4a 01 	call	0x294	; 0x294 <main>
  9e:	0c 94 08 05 	jmp	0xa10	; 0xa10 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initadc>:
 * Created: 2/5/2025 11:45:01 PM
 *  Author: njfg0
 */ 
#include "adc.h"
void initadc(void){
ADMUX=0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1

ADMUX|=(1<<ADLAR);
  ac:	80 81       	ld	r24, Z
  ae:	80 62       	ori	r24, 0x20	; 32
  b0:	80 83       	st	Z, r24
ADMUX|=(1<<REFS0);
  b2:	80 81       	ld	r24, Z
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	80 83       	st	Z, r24

ADCSRA=0;
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	10 82       	st	Z, r1
ADCSRA|=((1<<ADEN)|(1<<ADIE));
  be:	80 81       	ld	r24, Z
  c0:	88 68       	ori	r24, 0x88	; 136
  c2:	80 83       	st	Z, r24
//125k
ADCSRA|=((1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2));
  c4:	80 81       	ld	r24, Z
  c6:	87 60       	ori	r24, 0x07	; 7
  c8:	80 83       	st	Z, r24
//ADCSRB=0;
ADCSRA|=(1<<ADSC);
  ca:	80 81       	ld	r24, Z
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	80 83       	st	Z, r24
  d0:	08 95       	ret

000000d2 <initUART9600>:
 *  Author: njfg0
 */ 
#include "com_uart.h"
void initUART9600(void){
	//configurar pines tx y rx
	DDRD &=~(1<<DDD0);//entrada
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	8e 7f       	andi	r24, 0xFE	; 254
  d6:	8a b9       	out	0x0a, r24	; 10
	DDRD|=(1<<DDD1);//salida Tx
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	8a b9       	out	0x0a, r24	; 10
	
	//configurar registro A modo fast u2x0 en 1
	UCSR0A=0;
  de:	e0 ec       	ldi	r30, 0xC0	; 192
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	10 82       	st	Z, r1
	UCSR0A|=(1<<U2X0);
  e4:	80 81       	ld	r24, Z
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	80 83       	st	Z, r24
	
	//configurar registro B, habilotar isr rx, bits para habilitar RX y TX
	UCSR0B=0;
  ea:	e1 ec       	ldi	r30, 0xC1	; 193
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	10 82       	st	Z, r1
	UCSR0B|=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  f0:	80 81       	ld	r24, Z
  f2:	88 69       	ori	r24, 0x98	; 152
  f4:	80 83       	st	Z, r24
	
	//Configurar registro C<Frame asincrono 8 bits de datos sin pariedad, 1 bit de stop
	UCSR0C=0;
  f6:	e2 ec       	ldi	r30, 0xC2	; 194
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	10 82       	st	Z, r1
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);
  fc:	80 81       	ld	r24, Z
  fe:	86 60       	ori	r24, 0x06	; 6
 100:	80 83       	st	Z, r24
	
	//baudrate = 207 con % de error igual a 0.16% con 9600
	UBRR0=207;
 102:	8f ec       	ldi	r24, 0xCF	; 207
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 10a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 10e:	08 95       	ret

00000110 <port_disp>:
	//E=0;
	PORTD&=~(1<<PORTD3);
}

void port_disp(char a){
	if (a&1)
 110:	80 ff       	sbrs	r24, 0
 112:	04 c0       	rjmp	.+8      	; 0x11c <port_disp+0xc>
	PORTD|=(1<<PORTD4);
 114:	9b b1       	in	r25, 0x0b	; 11
 116:	90 61       	ori	r25, 0x10	; 16
 118:	9b b9       	out	0x0b, r25	; 11
 11a:	03 c0       	rjmp	.+6      	; 0x122 <port_disp+0x12>
	else
	PORTD&=~(1<<PORTD4);
 11c:	9b b1       	in	r25, 0x0b	; 11
 11e:	9f 7e       	andi	r25, 0xEF	; 239
 120:	9b b9       	out	0x0b, r25	; 11
	
	if (a&2)
 122:	81 ff       	sbrs	r24, 1
 124:	04 c0       	rjmp	.+8      	; 0x12e <port_disp+0x1e>
	PORTD|=(1<<PORTD5);
 126:	9b b1       	in	r25, 0x0b	; 11
 128:	90 62       	ori	r25, 0x20	; 32
 12a:	9b b9       	out	0x0b, r25	; 11
 12c:	03 c0       	rjmp	.+6      	; 0x134 <port_disp+0x24>
	else
	PORTD&=~(1<<PORTD5);
 12e:	9b b1       	in	r25, 0x0b	; 11
 130:	9f 7d       	andi	r25, 0xDF	; 223
 132:	9b b9       	out	0x0b, r25	; 11
	
	if (a&4)
 134:	82 ff       	sbrs	r24, 2
 136:	04 c0       	rjmp	.+8      	; 0x140 <port_disp+0x30>
	PORTD|=(1<<PORTD6);
 138:	9b b1       	in	r25, 0x0b	; 11
 13a:	90 64       	ori	r25, 0x40	; 64
 13c:	9b b9       	out	0x0b, r25	; 11
 13e:	03 c0       	rjmp	.+6      	; 0x146 <port_disp+0x36>
	else
	PORTD&=~(1<<PORTD6);
 140:	9b b1       	in	r25, 0x0b	; 11
 142:	9f 7b       	andi	r25, 0xBF	; 191
 144:	9b b9       	out	0x0b, r25	; 11
	
	if (a&8)
 146:	83 ff       	sbrs	r24, 3
 148:	04 c0       	rjmp	.+8      	; 0x152 <port_disp+0x42>
	PORTD|=(1<<PORTD7);
 14a:	9b b1       	in	r25, 0x0b	; 11
 14c:	90 68       	ori	r25, 0x80	; 128
 14e:	9b b9       	out	0x0b, r25	; 11
 150:	03 c0       	rjmp	.+6      	; 0x158 <port_disp+0x48>
	else
	PORTD&=~(1<<PORTD7);
 152:	9b b1       	in	r25, 0x0b	; 11
 154:	9f 77       	andi	r25, 0x7F	; 127
 156:	9b b9       	out	0x0b, r25	; 11
	
	if (a&16)
 158:	84 ff       	sbrs	r24, 4
 15a:	04 c0       	rjmp	.+8      	; 0x164 <port_disp+0x54>
	PORTB|=(1<<PORTB0);
 15c:	95 b1       	in	r25, 0x05	; 5
 15e:	91 60       	ori	r25, 0x01	; 1
 160:	95 b9       	out	0x05, r25	; 5
 162:	03 c0       	rjmp	.+6      	; 0x16a <port_disp+0x5a>
	else
	PORTB&=~(1<<PORTB0);
 164:	95 b1       	in	r25, 0x05	; 5
 166:	9e 7f       	andi	r25, 0xFE	; 254
 168:	95 b9       	out	0x05, r25	; 5
	
	if (a&32)
 16a:	85 ff       	sbrs	r24, 5
 16c:	04 c0       	rjmp	.+8      	; 0x176 <port_disp+0x66>
	PORTB|=(1<<PORTB1);
 16e:	95 b1       	in	r25, 0x05	; 5
 170:	92 60       	ori	r25, 0x02	; 2
 172:	95 b9       	out	0x05, r25	; 5
 174:	03 c0       	rjmp	.+6      	; 0x17c <port_disp+0x6c>
	else
	PORTB&=~(1<<PORTB1);
 176:	95 b1       	in	r25, 0x05	; 5
 178:	9d 7f       	andi	r25, 0xFD	; 253
 17a:	95 b9       	out	0x05, r25	; 5
	
	if (a&64)
 17c:	86 ff       	sbrs	r24, 6
 17e:	04 c0       	rjmp	.+8      	; 0x188 <port_disp+0x78>
	PORTB|=(1<<PORTB2);
 180:	95 b1       	in	r25, 0x05	; 5
 182:	94 60       	ori	r25, 0x04	; 4
 184:	95 b9       	out	0x05, r25	; 5
 186:	03 c0       	rjmp	.+6      	; 0x18e <port_disp+0x7e>
	else
	PORTB&=~(1<<PORTB2);
 188:	95 b1       	in	r25, 0x05	; 5
 18a:	9b 7f       	andi	r25, 0xFB	; 251
 18c:	95 b9       	out	0x05, r25	; 5
	
	if (a&128)
 18e:	88 23       	and	r24, r24
 190:	24 f4       	brge	.+8      	; 0x19a <port_disp+0x8a>
	PORTB|=(1<<PORTB3);
 192:	85 b1       	in	r24, 0x05	; 5
 194:	88 60       	ori	r24, 0x08	; 8
 196:	85 b9       	out	0x05, r24	; 5
 198:	08 95       	ret
	else
	PORTB&=~(1<<PORTB3);
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	87 7f       	andi	r24, 0xF7	; 247
 19e:	85 b9       	out	0x05, r24	; 5
 1a0:	08 95       	ret

000001a2 <comandos_LCD>:
	comandos_LCD(0b0001);	
}

void comandos_LCD(char a){
	//RS=0;
	PORTD&=~(1<<PORTD2);
 1a2:	9b b1       	in	r25, 0x0b	; 11
 1a4:	9b 7f       	andi	r25, 0xFB	; 251
 1a6:	9b b9       	out	0x0b, r25	; 11
	port_disp(a);
 1a8:	0e 94 88 00 	call	0x110	; 0x110 <port_disp>
	//enable=1;
	PORTD|=(1<<PORTD3);
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	88 60       	ori	r24, 0x08	; 8
 1b0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	8f e7       	ldi	r24, 0x7F	; 127
 1b4:	9e e3       	ldi	r25, 0x3E	; 62
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <comandos_LCD+0x14>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <comandos_LCD+0x1a>
 1bc:	00 00       	nop
	_delay_ms(4);
	//E=0;
	PORTD&=~(1<<PORTD3);
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	87 7f       	andi	r24, 0xF7	; 247
 1c2:	8b b9       	out	0x0b, r24	; 11
 1c4:	08 95       	ret

000001c6 <initLCD8b>:
 * Created: 1/30/2025 6:05:55 PM
 *  Author: njfg0
 */ 
#include "lcd.h"
void initLCD8b(void){
	DDRD|=(1<<DDD7)|(1<<DDD6)|(1<<DDD5)|(1<<DDD4)|(1<<DDD3)|(1<<DDD2);
 1c6:	8a b1       	in	r24, 0x0a	; 10
 1c8:	8c 6f       	ori	r24, 0xFC	; 252
 1ca:	8a b9       	out	0x0a, r24	; 10
	DDRB|=(1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB3);
 1cc:	84 b1       	in	r24, 0x04	; 4
 1ce:	8f 60       	ori	r24, 0x0F	; 15
 1d0:	84 b9       	out	0x04, r24	; 4
	PORTB=0;
 1d2:	15 b8       	out	0x05, r1	; 5
	PORTD=0;
 1d4:	1b b8       	out	0x0b, r1	; 11
	
	port_disp(0x00);
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	0e 94 88 00 	call	0x110	; 0x110 <port_disp>
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
 1de:	89 ef       	ldi	r24, 0xF9	; 249
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <initLCD8b+0x1c>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <initLCD8b+0x26>
 1ec:	00 00       	nop
	_delay_ms(20);
	
	//function set
	comandos_LCD(0b00111000);
 1ee:	88 e3       	ldi	r24, 0x38	; 56
 1f0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <comandos_LCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	8f e8       	ldi	r24, 0x8F	; 143
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <initLCD8b+0x32>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <initLCD8b+0x38>
 1fe:	00 00       	nop
	_delay_us(100);
	
	//display on/off
	comandos_LCD(0b1100);
 200:	8c e0       	ldi	r24, 0x0C	; 12
 202:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <comandos_LCD>
 206:	8f e8       	ldi	r24, 0x8F	; 143
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <initLCD8b+0x44>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <initLCD8b+0x4a>
 210:	00 00       	nop
	_delay_us(100);
	
	//Entry mode
	comandos_LCD(0b0110);
 212:	86 e0       	ldi	r24, 0x06	; 6
 214:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <comandos_LCD>
 218:	8f e8       	ldi	r24, 0x8F	; 143
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <initLCD8b+0x56>
 220:	00 c0       	rjmp	.+0      	; 0x222 <initLCD8b+0x5c>
 222:	00 00       	nop
	_delay_us(100);
	
	//clear display
	comandos_LCD(0b0001);	
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <comandos_LCD>
 22a:	08 95       	ret

0000022c <LCD_write_char>:
}

void LCD_write_char(char d){
	//manda y escribe el mensaje
	//RS=1
	PORTD|=(1<<PORTD2);
 22c:	9b b1       	in	r25, 0x0b	; 11
 22e:	94 60       	ori	r25, 0x04	; 4
 230:	9b b9       	out	0x0b, r25	; 11
	port_disp(d);
 232:	0e 94 88 00 	call	0x110	; 0x110 <port_disp>
	//E=1
	PORTD|=(1<<PORTD3);
 236:	8b b1       	in	r24, 0x0b	; 11
 238:	88 60       	ori	r24, 0x08	; 8
 23a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23c:	8f e7       	ldi	r24, 0x7F	; 127
 23e:	9e e3       	ldi	r25, 0x3E	; 62
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <LCD_write_char+0x14>
 244:	00 c0       	rjmp	.+0      	; 0x246 <LCD_write_char+0x1a>
 246:	00 00       	nop
	_delay_ms(4);
	//E=0
	PORTD&=~(1<<PORTD3);
 248:	8b b1       	in	r24, 0x0b	; 11
 24a:	87 7f       	andi	r24, 0xF7	; 247
 24c:	8b b9       	out	0x0b, r24	; 11
 24e:	08 95       	ret

00000250 <LCD_write_String>:
	
}

void LCD_write_String(char *a){
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	8c 01       	movw	r16, r24
	int i;
	for (i=0;a[i]!='\0';i++)
 25a:	c0 e0       	ldi	r28, 0x00	; 0
 25c:	d0 e0       	ldi	r29, 0x00	; 0
 25e:	03 c0       	rjmp	.+6      	; 0x266 <LCD_write_String+0x16>
	LCD_write_char(a[i]);
 260:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_write_char>
	
}

void LCD_write_String(char *a){
	int i;
	for (i=0;a[i]!='\0';i++)
 264:	21 96       	adiw	r28, 0x01	; 1
 266:	f8 01       	movw	r30, r16
 268:	ec 0f       	add	r30, r28
 26a:	fd 1f       	adc	r31, r29
 26c:	80 81       	ld	r24, Z
 26e:	81 11       	cpse	r24, r1
 270:	f7 cf       	rjmp	.-18     	; 0x260 <LCD_write_String+0x10>
	LCD_write_char(a[i]);
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	08 95       	ret

0000027c <LCD_Set_Cursor>:

	
	
void LCD_Set_Cursor(char c, char f){
	char temp;
	if (f==1){
 27c:	61 30       	cpi	r22, 0x01	; 1
 27e:	21 f4       	brne	.+8      	; 0x288 <LCD_Set_Cursor+0xc>
		temp=0x80+c;
		comandos_LCD(temp);
 280:	80 58       	subi	r24, 0x80	; 128
 282:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <comandos_LCD>
 286:	08 95       	ret
	}else if(f==2){
 288:	62 30       	cpi	r22, 0x02	; 2
 28a:	19 f4       	brne	.+6      	; 0x292 <LCD_Set_Cursor+0x16>
		temp=0xC0+c;
		comandos_LCD(temp);
 28c:	80 54       	subi	r24, 0x40	; 64
 28e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <comandos_LCD>
 292:	08 95       	ret

00000294 <main>:
int contador=0;
uint8_t leer_uart=0;


int main(void)
{	
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	2f 97       	sbiw	r28, 0x0f	; 15
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	f8 94       	cli
 2a2:	de bf       	out	0x3e, r29	; 62
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	cd bf       	out	0x3d, r28	; 61
	cli();
 2a8:	f8 94       	cli
	DDRC=0;
 2aa:	17 b8       	out	0x07, r1	; 7
	initUART9600();
 2ac:	0e 94 69 00 	call	0xd2	; 0xd2 <initUART9600>
	initadc();
 2b0:	0e 94 53 00 	call	0xa6	; 0xa6 <initadc>
	initLCD8b();
 2b4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <initLCD8b>
	
	//ADCSRA|=(1<<ADSC);
	sei();
 2b8:	78 94       	sei
	LCD_Set_Cursor(1,1);
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_Set_Cursor>
	LCD_write_String("S1:");
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	0e 94 28 01 	call	0x250	; 0x250 <LCD_write_String>
	LCD_Set_Cursor(7,1);
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	87 e0       	ldi	r24, 0x07	; 7
 2ce:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_Set_Cursor>
	LCD_write_String("S2:");
 2d2:	84 e0       	ldi	r24, 0x04	; 4
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	0e 94 28 01 	call	0x250	; 0x250 <LCD_write_String>
	LCD_Set_Cursor(13,1);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	8d e0       	ldi	r24, 0x0D	; 13
 2de:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_Set_Cursor>
	LCD_write_String("S3:");
 2e2:	88 e0       	ldi	r24, 0x08	; 8
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 28 01 	call	0x250	; 0x250 <LCD_write_String>
	
	uint16_t prev_valor_pot1 = 255;
	uint16_t prev_valor_pot2 = 255;
 2ea:	0f ef       	ldi	r16, 0xFF	; 255
 2ec:	10 e0       	ldi	r17, 0x00	; 0
	LCD_Set_Cursor(7,1);
	LCD_write_String("S2:");
	LCD_Set_Cursor(13,1);
	LCD_write_String("S3:");
	
	uint16_t prev_valor_pot1 = 255;
 2ee:	2f ef       	ldi	r18, 0xFF	; 255
 2f0:	30 e0       	ldi	r19, 0x00	; 0
    /* Replace with your application code */
    while (1) 
    {
	
		//PORTC=(1<<valor_pot1);
		if (change_value_pot1==1||change_value_pot2==1){//||change_value_pot2==1
 2f2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <change_value_pot1>
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	21 f0       	breq	.+8      	; 0x302 <main+0x6e>
 2fa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <change_value_pot2>
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	c1 f7       	brne	.-16     	; 0x2f2 <main+0x5e>
			change_value_pot1=0;
 302:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <change_value_pot1>
			change_value_pot2=0;
 306:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <change_value_pot2>
			
			//comandos_LCD(0b0001);
			if (valor_pot1 != prev_valor_pot1|| valor_pot2 != prev_valor_pot2) {//|| valor_pot2 != prev_valor_pot2
 30a:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <valor_pot1>
 30e:	26 2e       	mov	r2, r22
 310:	31 2c       	mov	r3, r1
 312:	22 15       	cp	r18, r2
 314:	33 05       	cpc	r19, r3
 316:	31 f4       	brne	.+12     	; 0x324 <main+0x90>
 318:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <valor_pot2>
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	08 17       	cp	r16, r24
 320:	19 07       	cpc	r17, r25
 322:	39 f3       	breq	.-50     	; 0x2f2 <main+0x5e>
				 prev_valor_pot1 = valor_pot1;
				 prev_valor_pot2 = valor_pot2;
 324:	00 91 12 01 	lds	r16, 0x0112	; 0x800112 <valor_pot2>
 328:	10 e0       	ldi	r17, 0x00	; 0
			
				float mpot1=(valor_pot1*5.0)/255.0;
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__floatsisf>
 334:	20 e0       	ldi	r18, 0x00	; 0
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	40 ea       	ldi	r20, 0xA0	; 160
 33a:	50 e4       	ldi	r21, 0x40	; 64
 33c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3>
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	4f e7       	ldi	r20, 0x7F	; 127
 346:	53 e4       	ldi	r21, 0x43	; 67
 348:	0e 94 3d 03 	call	0x67a	; 0x67a <__divsf3>
 34c:	6b 01       	movw	r12, r22
 34e:	7c 01       	movw	r14, r24
				float mpot2=(valor_pot2*5.0)/255.0;
 350:	b8 01       	movw	r22, r16
 352:	01 2e       	mov	r0, r17
 354:	00 0c       	add	r0, r0
 356:	88 0b       	sbc	r24, r24
 358:	99 0b       	sbc	r25, r25
 35a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__floatsisf>
 35e:	20 e0       	ldi	r18, 0x00	; 0
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	40 ea       	ldi	r20, 0xA0	; 160
 364:	50 e4       	ldi	r21, 0x40	; 64
 366:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3>
 36a:	20 e0       	ldi	r18, 0x00	; 0
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	4f e7       	ldi	r20, 0x7F	; 127
 370:	53 e4       	ldi	r21, 0x43	; 67
 372:	0e 94 3d 03 	call	0x67a	; 0x67a <__divsf3>
 376:	2b 01       	movw	r4, r22
 378:	3c 01       	movw	r6, r24
			
				int enterov1=(int)mpot1;
 37a:	c7 01       	movw	r24, r14
 37c:	b6 01       	movw	r22, r12
 37e:	0e 94 af 03 	call	0x75e	; 0x75e <__fixsfsi>
 382:	4b 01       	movw	r8, r22
 384:	5c 01       	movw	r10, r24
				int decimalv1=(int)((mpot1-enterov1)*100);
 386:	07 2e       	mov	r0, r23
 388:	00 0c       	add	r0, r0
 38a:	88 0b       	sbc	r24, r24
 38c:	99 0b       	sbc	r25, r25
 38e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__floatsisf>
 392:	9b 01       	movw	r18, r22
 394:	ac 01       	movw	r20, r24
 396:	c7 01       	movw	r24, r14
 398:	b6 01       	movw	r22, r12
 39a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__subsf3>
 39e:	20 e0       	ldi	r18, 0x00	; 0
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	48 ec       	ldi	r20, 0xC8	; 200
 3a4:	52 e4       	ldi	r21, 0x42	; 66
 3a6:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3>
 3aa:	0e 94 af 03 	call	0x75e	; 0x75e <__fixsfsi>
 3ae:	7f 87       	std	Y+15, r23	; 0x0f
 3b0:	6e 87       	std	Y+14, r22	; 0x0e
			
				int enterov2=(int)mpot2;
 3b2:	c3 01       	movw	r24, r6
 3b4:	b2 01       	movw	r22, r4
 3b6:	0e 94 af 03 	call	0x75e	; 0x75e <__fixsfsi>
 3ba:	6b 01       	movw	r12, r22
 3bc:	7c 01       	movw	r14, r24
				int decimalv2=(int)((mpot2-enterov2)*100);
 3be:	07 2e       	mov	r0, r23
 3c0:	00 0c       	add	r0, r0
 3c2:	88 0b       	sbc	r24, r24
 3c4:	99 0b       	sbc	r25, r25
 3c6:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__floatsisf>
 3ca:	9b 01       	movw	r18, r22
 3cc:	ac 01       	movw	r20, r24
 3ce:	c3 01       	movw	r24, r6
 3d0:	b2 01       	movw	r22, r4
 3d2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__subsf3>
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	48 ec       	ldi	r20, 0xC8	; 200
 3dc:	52 e4       	ldi	r21, 0x42	; 66
 3de:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3>
 3e2:	0e 94 af 03 	call	0x75e	; 0x75e <__fixsfsi>
 3e6:	3b 01       	movw	r6, r22
			
				char mensaje1[5];
				LCD_Set_Cursor(0,2);
 3e8:	62 e0       	ldi	r22, 0x02	; 2
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_Set_Cursor>
				mensaje1[0]='0'+enterov1;
 3f0:	80 e3       	ldi	r24, 0x30	; 48
 3f2:	88 0d       	add	r24, r8
 3f4:	8e 83       	std	Y+6, r24	; 0x06
				mensaje1[1]='.';
 3f6:	0f 2e       	mov	r0, r31
 3f8:	fe e2       	ldi	r31, 0x2E	; 46
 3fa:	9f 2e       	mov	r9, r31
 3fc:	f0 2d       	mov	r31, r0
 3fe:	9f 82       	std	Y+7, r9	; 0x07
				mensaje1[2]='0'+(decimalv1/10);
 400:	0f 2e       	mov	r0, r31
 402:	fa e0       	ldi	r31, 0x0A	; 10
 404:	af 2e       	mov	r10, r31
 406:	b1 2c       	mov	r11, r1
 408:	f0 2d       	mov	r31, r0
 40a:	8e 85       	ldd	r24, Y+14	; 0x0e
 40c:	9f 85       	ldd	r25, Y+15	; 0x0f
 40e:	b5 01       	movw	r22, r10
 410:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__divmodhi4>
 414:	60 5d       	subi	r22, 0xD0	; 208
 416:	68 87       	std	Y+8, r22	; 0x08
				mensaje1[3]='0'+(decimalv1%10);
 418:	80 5d       	subi	r24, 0xD0	; 208
 41a:	89 87       	std	Y+9, r24	; 0x09
				mensaje1[4]='V';
 41c:	0f 2e       	mov	r0, r31
 41e:	f6 e5       	ldi	r31, 0x56	; 86
 420:	8f 2e       	mov	r8, r31
 422:	f0 2d       	mov	r31, r0
 424:	8a 86       	std	Y+10, r8	; 0x0a
				mensaje1[5]='\0';
 426:	1b 86       	std	Y+11, r1	; 0x0b
				
				LCD_write_String(mensaje1);
 428:	ce 01       	movw	r24, r28
 42a:	06 96       	adiw	r24, 0x06	; 6
 42c:	0e 94 28 01 	call	0x250	; 0x250 <LCD_write_String>
								
				
				char mensaje2[5];
				LCD_Set_Cursor(6,2);
 430:	62 e0       	ldi	r22, 0x02	; 2
 432:	86 e0       	ldi	r24, 0x06	; 6
 434:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_Set_Cursor>
				mensaje2[0]='0'+enterov2;
 438:	80 e3       	ldi	r24, 0x30	; 48
 43a:	8c 0d       	add	r24, r12
 43c:	89 83       	std	Y+1, r24	; 0x01
				mensaje2[1]='.';
 43e:	9a 82       	std	Y+2, r9	; 0x02
				mensaje2[2]='0'+(decimalv2/10);
 440:	c3 01       	movw	r24, r6
 442:	b5 01       	movw	r22, r10
 444:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__divmodhi4>
 448:	60 5d       	subi	r22, 0xD0	; 208
 44a:	6b 83       	std	Y+3, r22	; 0x03
				mensaje2[3]='0'+(decimalv2%10);
 44c:	80 5d       	subi	r24, 0xD0	; 208
 44e:	8c 83       	std	Y+4, r24	; 0x04
				mensaje2[4]='V';
 450:	8d 82       	std	Y+5, r8	; 0x05
				mensaje2[5]='\0';
 452:	1e 82       	std	Y+6, r1	; 0x06
				LCD_write_String(mensaje2);
 454:	ce 01       	movw	r24, r28
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	0e 94 28 01 	call	0x250	; 0x250 <LCD_write_String>
				
				if(leer_uart==1){
 45c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 460:	81 30       	cpi	r24, 0x01	; 1
 462:	61 f5       	brne	.+88     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
					if(buffRX=='+'){
 464:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <buffRX>
 468:	8b 32       	cpi	r24, 0x2B	; 43
 46a:	89 f4       	brne	.+34     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
						contador+=1;
 46c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <contador>
 470:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <contador+0x1>
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <contador+0x1>
 47a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <contador>
						if (contador==20)
 47e:	44 97       	sbiw	r24, 0x14	; 20
 480:	21 f4       	brne	.+8      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
						{
							contador=0;
 482:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <contador+0x1>
 486:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <contador>
						}
						leer_uart=0;
 48a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
					}
					if(buffRX=='-'){
 48e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <buffRX>
 492:	8d 32       	cpi	r24, 0x2D	; 45
 494:	99 f4       	brne	.+38     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
						contador-=1;
 496:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <contador>
 49a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <contador+0x1>
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <contador+0x1>
 4a4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <contador>
						if (contador==-1)
 4a8:	01 96       	adiw	r24, 0x01	; 1
 4aa:	31 f4       	brne	.+12     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
						{
							contador=20;
 4ac:	84 e1       	ldi	r24, 0x14	; 20
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <contador+0x1>
 4b4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <contador>
						}
						leer_uart=0;
 4b8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
					}
				}
				
				//Mostrar el tercer sensor
				char mensaje3[3];
				LCD_Set_Cursor(12,2);
 4bc:	62 e0       	ldi	r22, 0x02	; 2
 4be:	8c e0       	ldi	r24, 0x0C	; 12
 4c0:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_Set_Cursor>
				mensaje3[0]='0'+(contador/10);
 4c4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <contador>
 4c8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <contador+0x1>
 4cc:	6a e0       	ldi	r22, 0x0A	; 10
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__divmodhi4>
 4d4:	60 5d       	subi	r22, 0xD0	; 208
 4d6:	6b 87       	std	Y+11, r22	; 0x0b
				mensaje3[1]='0'+(contador%10);
 4d8:	80 5d       	subi	r24, 0xD0	; 208
 4da:	8c 87       	std	Y+12, r24	; 0x0c
				mensaje3[2]='V';
 4dc:	86 e5       	ldi	r24, 0x56	; 86
 4de:	8d 87       	std	Y+13, r24	; 0x0d
				mensaje3[3]='\0';
 4e0:	1e 86       	std	Y+14, r1	; 0x0e
				LCD_write_String(mensaje3);
 4e2:	ce 01       	movw	r24, r28
 4e4:	0b 96       	adiw	r24, 0x0b	; 11
 4e6:	0e 94 28 01 	call	0x250	; 0x250 <LCD_write_String>
			change_value_pot1=0;
			change_value_pot2=0;
			
			//comandos_LCD(0b0001);
			if (valor_pot1 != prev_valor_pot1|| valor_pot2 != prev_valor_pot2) {//|| valor_pot2 != prev_valor_pot2
				 prev_valor_pot1 = valor_pot1;
 4ea:	91 01       	movw	r18, r2
 4ec:	02 cf       	rjmp	.-508    	; 0x2f2 <main+0x5e>

000004ee <__vector_21>:
			}
		}
    }
}

ISR(ADC_vect){
 4ee:	1f 92       	push	r1
 4f0:	0f 92       	push	r0
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	0f 92       	push	r0
 4f6:	11 24       	eor	r1, r1
 4f8:	8f 93       	push	r24
 4fa:	ef 93       	push	r30
 4fc:	ff 93       	push	r31
	//ADMUX=0;
	//valor_pot1=ADCH;
	//change_value_pot1=1;
	ADCSRA &= ~(1<<ADEN);
 4fe:	ea e7       	ldi	r30, 0x7A	; 122
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	8f 77       	andi	r24, 0x7F	; 127
 506:	80 83       	st	Z, r24
	if (switch_pot==0){
 508:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <switch_pot>
 50c:	81 11       	cpse	r24, r1
 50e:	12 c0       	rjmp	.+36     	; 0x534 <__vector_21+0x46>
			ADMUX|= (1<<MUX0);
 510:	ec e7       	ldi	r30, 0x7C	; 124
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	81 60       	ori	r24, 0x01	; 1
 518:	80 83       	st	Z, r24
			
			valor_pot1=ADCH;
 51a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 51e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <valor_pot1>
			switch_pot+=1;
 522:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <switch_pot>
 526:	8f 5f       	subi	r24, 0xFF	; 255
 528:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <switch_pot>
			change_value_pot1=1;
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <change_value_pot1>
 532:	10 c0       	rjmp	.+32     	; 0x554 <__vector_21+0x66>
		}else if (switch_pot==1){
 534:	81 30       	cpi	r24, 0x01	; 1
 536:	71 f4       	brne	.+28     	; 0x554 <__vector_21+0x66>
			ADMUX&=~(1<<MUX0);
 538:	ec e7       	ldi	r30, 0x7C	; 124
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	8e 7f       	andi	r24, 0xFE	; 254
 540:	80 83       	st	Z, r24
			valor_pot2=ADCH;
 542:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 546:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <valor_pot2>
			switch_pot=0;
 54a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <switch_pot>
			change_value_pot2=1;
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <change_value_pot2>
	}
	ADCSRA |= (1<<ADEN);
 554:	ea e7       	ldi	r30, 0x7A	; 122
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	80 81       	ld	r24, Z
 55a:	80 68       	ori	r24, 0x80	; 128
 55c:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADSC);
 55e:	80 81       	ld	r24, Z
 560:	80 64       	ori	r24, 0x40	; 64
 562:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADIF);
 564:	80 81       	ld	r24, Z
 566:	80 61       	ori	r24, 0x10	; 16
 568:	80 83       	st	Z, r24
	
}
 56a:	ff 91       	pop	r31
 56c:	ef 91       	pop	r30
 56e:	8f 91       	pop	r24
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	1f 90       	pop	r1
 578:	18 95       	reti

0000057a <__vector_18>:
ISR(USART_RX_vect){
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	8f 93       	push	r24
	leer_uart=1;
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	buffRX=UDR0;
 58c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 590:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <buffRX>
}
 594:	8f 91       	pop	r24
 596:	0f 90       	pop	r0
 598:	0f be       	out	0x3f, r0	; 63
 59a:	0f 90       	pop	r0
 59c:	1f 90       	pop	r1
 59e:	18 95       	reti

000005a0 <__subsf3>:
 5a0:	50 58       	subi	r21, 0x80	; 128

000005a2 <__addsf3>:
 5a2:	bb 27       	eor	r27, r27
 5a4:	aa 27       	eor	r26, r26
 5a6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__addsf3x>
 5aa:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_round>
 5ae:	0e 94 2b 04 	call	0x856	; 0x856 <__fp_pscA>
 5b2:	38 f0       	brcs	.+14     	; 0x5c2 <__addsf3+0x20>
 5b4:	0e 94 32 04 	call	0x864	; 0x864 <__fp_pscB>
 5b8:	20 f0       	brcs	.+8      	; 0x5c2 <__addsf3+0x20>
 5ba:	39 f4       	brne	.+14     	; 0x5ca <__addsf3+0x28>
 5bc:	9f 3f       	cpi	r25, 0xFF	; 255
 5be:	19 f4       	brne	.+6      	; 0x5c6 <__addsf3+0x24>
 5c0:	26 f4       	brtc	.+8      	; 0x5ca <__addsf3+0x28>
 5c2:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_nan>
 5c6:	0e f4       	brtc	.+2      	; 0x5ca <__addsf3+0x28>
 5c8:	e0 95       	com	r30
 5ca:	e7 fb       	bst	r30, 7
 5cc:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_inf>

000005d0 <__addsf3x>:
 5d0:	e9 2f       	mov	r30, r25
 5d2:	0e 94 4a 04 	call	0x894	; 0x894 <__fp_split3>
 5d6:	58 f3       	brcs	.-42     	; 0x5ae <__addsf3+0xc>
 5d8:	ba 17       	cp	r27, r26
 5da:	62 07       	cpc	r22, r18
 5dc:	73 07       	cpc	r23, r19
 5de:	84 07       	cpc	r24, r20
 5e0:	95 07       	cpc	r25, r21
 5e2:	20 f0       	brcs	.+8      	; 0x5ec <__addsf3x+0x1c>
 5e4:	79 f4       	brne	.+30     	; 0x604 <__addsf3x+0x34>
 5e6:	a6 f5       	brtc	.+104    	; 0x650 <__addsf3x+0x80>
 5e8:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__fp_zero>
 5ec:	0e f4       	brtc	.+2      	; 0x5f0 <__addsf3x+0x20>
 5ee:	e0 95       	com	r30
 5f0:	0b 2e       	mov	r0, r27
 5f2:	ba 2f       	mov	r27, r26
 5f4:	a0 2d       	mov	r26, r0
 5f6:	0b 01       	movw	r0, r22
 5f8:	b9 01       	movw	r22, r18
 5fa:	90 01       	movw	r18, r0
 5fc:	0c 01       	movw	r0, r24
 5fe:	ca 01       	movw	r24, r20
 600:	a0 01       	movw	r20, r0
 602:	11 24       	eor	r1, r1
 604:	ff 27       	eor	r31, r31
 606:	59 1b       	sub	r21, r25
 608:	99 f0       	breq	.+38     	; 0x630 <__addsf3x+0x60>
 60a:	59 3f       	cpi	r21, 0xF9	; 249
 60c:	50 f4       	brcc	.+20     	; 0x622 <__addsf3x+0x52>
 60e:	50 3e       	cpi	r21, 0xE0	; 224
 610:	68 f1       	brcs	.+90     	; 0x66c <__addsf3x+0x9c>
 612:	1a 16       	cp	r1, r26
 614:	f0 40       	sbci	r31, 0x00	; 0
 616:	a2 2f       	mov	r26, r18
 618:	23 2f       	mov	r18, r19
 61a:	34 2f       	mov	r19, r20
 61c:	44 27       	eor	r20, r20
 61e:	58 5f       	subi	r21, 0xF8	; 248
 620:	f3 cf       	rjmp	.-26     	; 0x608 <__addsf3x+0x38>
 622:	46 95       	lsr	r20
 624:	37 95       	ror	r19
 626:	27 95       	ror	r18
 628:	a7 95       	ror	r26
 62a:	f0 40       	sbci	r31, 0x00	; 0
 62c:	53 95       	inc	r21
 62e:	c9 f7       	brne	.-14     	; 0x622 <__addsf3x+0x52>
 630:	7e f4       	brtc	.+30     	; 0x650 <__addsf3x+0x80>
 632:	1f 16       	cp	r1, r31
 634:	ba 0b       	sbc	r27, r26
 636:	62 0b       	sbc	r22, r18
 638:	73 0b       	sbc	r23, r19
 63a:	84 0b       	sbc	r24, r20
 63c:	ba f0       	brmi	.+46     	; 0x66c <__addsf3x+0x9c>
 63e:	91 50       	subi	r25, 0x01	; 1
 640:	a1 f0       	breq	.+40     	; 0x66a <__addsf3x+0x9a>
 642:	ff 0f       	add	r31, r31
 644:	bb 1f       	adc	r27, r27
 646:	66 1f       	adc	r22, r22
 648:	77 1f       	adc	r23, r23
 64a:	88 1f       	adc	r24, r24
 64c:	c2 f7       	brpl	.-16     	; 0x63e <__addsf3x+0x6e>
 64e:	0e c0       	rjmp	.+28     	; 0x66c <__addsf3x+0x9c>
 650:	ba 0f       	add	r27, r26
 652:	62 1f       	adc	r22, r18
 654:	73 1f       	adc	r23, r19
 656:	84 1f       	adc	r24, r20
 658:	48 f4       	brcc	.+18     	; 0x66c <__addsf3x+0x9c>
 65a:	87 95       	ror	r24
 65c:	77 95       	ror	r23
 65e:	67 95       	ror	r22
 660:	b7 95       	ror	r27
 662:	f7 95       	ror	r31
 664:	9e 3f       	cpi	r25, 0xFE	; 254
 666:	08 f0       	brcs	.+2      	; 0x66a <__addsf3x+0x9a>
 668:	b0 cf       	rjmp	.-160    	; 0x5ca <__addsf3+0x28>
 66a:	93 95       	inc	r25
 66c:	88 0f       	add	r24, r24
 66e:	08 f0       	brcs	.+2      	; 0x672 <__addsf3x+0xa2>
 670:	99 27       	eor	r25, r25
 672:	ee 0f       	add	r30, r30
 674:	97 95       	ror	r25
 676:	87 95       	ror	r24
 678:	08 95       	ret

0000067a <__divsf3>:
 67a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__divsf3x>
 67e:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_round>
 682:	0e 94 32 04 	call	0x864	; 0x864 <__fp_pscB>
 686:	58 f0       	brcs	.+22     	; 0x69e <__divsf3+0x24>
 688:	0e 94 2b 04 	call	0x856	; 0x856 <__fp_pscA>
 68c:	40 f0       	brcs	.+16     	; 0x69e <__divsf3+0x24>
 68e:	29 f4       	brne	.+10     	; 0x69a <__divsf3+0x20>
 690:	5f 3f       	cpi	r21, 0xFF	; 255
 692:	29 f0       	breq	.+10     	; 0x69e <__divsf3+0x24>
 694:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_inf>
 698:	51 11       	cpse	r21, r1
 69a:	0c 94 6d 04 	jmp	0x8da	; 0x8da <__fp_szero>
 69e:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_nan>

000006a2 <__divsf3x>:
 6a2:	0e 94 4a 04 	call	0x894	; 0x894 <__fp_split3>
 6a6:	68 f3       	brcs	.-38     	; 0x682 <__divsf3+0x8>

000006a8 <__divsf3_pse>:
 6a8:	99 23       	and	r25, r25
 6aa:	b1 f3       	breq	.-20     	; 0x698 <__divsf3+0x1e>
 6ac:	55 23       	and	r21, r21
 6ae:	91 f3       	breq	.-28     	; 0x694 <__divsf3+0x1a>
 6b0:	95 1b       	sub	r25, r21
 6b2:	55 0b       	sbc	r21, r21
 6b4:	bb 27       	eor	r27, r27
 6b6:	aa 27       	eor	r26, r26
 6b8:	62 17       	cp	r22, r18
 6ba:	73 07       	cpc	r23, r19
 6bc:	84 07       	cpc	r24, r20
 6be:	38 f0       	brcs	.+14     	; 0x6ce <__divsf3_pse+0x26>
 6c0:	9f 5f       	subi	r25, 0xFF	; 255
 6c2:	5f 4f       	sbci	r21, 0xFF	; 255
 6c4:	22 0f       	add	r18, r18
 6c6:	33 1f       	adc	r19, r19
 6c8:	44 1f       	adc	r20, r20
 6ca:	aa 1f       	adc	r26, r26
 6cc:	a9 f3       	breq	.-22     	; 0x6b8 <__divsf3_pse+0x10>
 6ce:	35 d0       	rcall	.+106    	; 0x73a <__divsf3_pse+0x92>
 6d0:	0e 2e       	mov	r0, r30
 6d2:	3a f0       	brmi	.+14     	; 0x6e2 <__divsf3_pse+0x3a>
 6d4:	e0 e8       	ldi	r30, 0x80	; 128
 6d6:	32 d0       	rcall	.+100    	; 0x73c <__divsf3_pse+0x94>
 6d8:	91 50       	subi	r25, 0x01	; 1
 6da:	50 40       	sbci	r21, 0x00	; 0
 6dc:	e6 95       	lsr	r30
 6de:	00 1c       	adc	r0, r0
 6e0:	ca f7       	brpl	.-14     	; 0x6d4 <__divsf3_pse+0x2c>
 6e2:	2b d0       	rcall	.+86     	; 0x73a <__divsf3_pse+0x92>
 6e4:	fe 2f       	mov	r31, r30
 6e6:	29 d0       	rcall	.+82     	; 0x73a <__divsf3_pse+0x92>
 6e8:	66 0f       	add	r22, r22
 6ea:	77 1f       	adc	r23, r23
 6ec:	88 1f       	adc	r24, r24
 6ee:	bb 1f       	adc	r27, r27
 6f0:	26 17       	cp	r18, r22
 6f2:	37 07       	cpc	r19, r23
 6f4:	48 07       	cpc	r20, r24
 6f6:	ab 07       	cpc	r26, r27
 6f8:	b0 e8       	ldi	r27, 0x80	; 128
 6fa:	09 f0       	breq	.+2      	; 0x6fe <__divsf3_pse+0x56>
 6fc:	bb 0b       	sbc	r27, r27
 6fe:	80 2d       	mov	r24, r0
 700:	bf 01       	movw	r22, r30
 702:	ff 27       	eor	r31, r31
 704:	93 58       	subi	r25, 0x83	; 131
 706:	5f 4f       	sbci	r21, 0xFF	; 255
 708:	3a f0       	brmi	.+14     	; 0x718 <__divsf3_pse+0x70>
 70a:	9e 3f       	cpi	r25, 0xFE	; 254
 70c:	51 05       	cpc	r21, r1
 70e:	78 f0       	brcs	.+30     	; 0x72e <__divsf3_pse+0x86>
 710:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_inf>
 714:	0c 94 6d 04 	jmp	0x8da	; 0x8da <__fp_szero>
 718:	5f 3f       	cpi	r21, 0xFF	; 255
 71a:	e4 f3       	brlt	.-8      	; 0x714 <__divsf3_pse+0x6c>
 71c:	98 3e       	cpi	r25, 0xE8	; 232
 71e:	d4 f3       	brlt	.-12     	; 0x714 <__divsf3_pse+0x6c>
 720:	86 95       	lsr	r24
 722:	77 95       	ror	r23
 724:	67 95       	ror	r22
 726:	b7 95       	ror	r27
 728:	f7 95       	ror	r31
 72a:	9f 5f       	subi	r25, 0xFF	; 255
 72c:	c9 f7       	brne	.-14     	; 0x720 <__divsf3_pse+0x78>
 72e:	88 0f       	add	r24, r24
 730:	91 1d       	adc	r25, r1
 732:	96 95       	lsr	r25
 734:	87 95       	ror	r24
 736:	97 f9       	bld	r25, 7
 738:	08 95       	ret
 73a:	e1 e0       	ldi	r30, 0x01	; 1
 73c:	66 0f       	add	r22, r22
 73e:	77 1f       	adc	r23, r23
 740:	88 1f       	adc	r24, r24
 742:	bb 1f       	adc	r27, r27
 744:	62 17       	cp	r22, r18
 746:	73 07       	cpc	r23, r19
 748:	84 07       	cpc	r24, r20
 74a:	ba 07       	cpc	r27, r26
 74c:	20 f0       	brcs	.+8      	; 0x756 <__divsf3_pse+0xae>
 74e:	62 1b       	sub	r22, r18
 750:	73 0b       	sbc	r23, r19
 752:	84 0b       	sbc	r24, r20
 754:	ba 0b       	sbc	r27, r26
 756:	ee 1f       	adc	r30, r30
 758:	88 f7       	brcc	.-30     	; 0x73c <__divsf3_pse+0x94>
 75a:	e0 95       	com	r30
 75c:	08 95       	ret

0000075e <__fixsfsi>:
 75e:	0e 94 b6 03 	call	0x76c	; 0x76c <__fixunssfsi>
 762:	68 94       	set
 764:	b1 11       	cpse	r27, r1
 766:	0c 94 6d 04 	jmp	0x8da	; 0x8da <__fp_szero>
 76a:	08 95       	ret

0000076c <__fixunssfsi>:
 76c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <__fp_splitA>
 770:	88 f0       	brcs	.+34     	; 0x794 <__fixunssfsi+0x28>
 772:	9f 57       	subi	r25, 0x7F	; 127
 774:	98 f0       	brcs	.+38     	; 0x79c <__fixunssfsi+0x30>
 776:	b9 2f       	mov	r27, r25
 778:	99 27       	eor	r25, r25
 77a:	b7 51       	subi	r27, 0x17	; 23
 77c:	b0 f0       	brcs	.+44     	; 0x7aa <__fixunssfsi+0x3e>
 77e:	e1 f0       	breq	.+56     	; 0x7b8 <__fixunssfsi+0x4c>
 780:	66 0f       	add	r22, r22
 782:	77 1f       	adc	r23, r23
 784:	88 1f       	adc	r24, r24
 786:	99 1f       	adc	r25, r25
 788:	1a f0       	brmi	.+6      	; 0x790 <__fixunssfsi+0x24>
 78a:	ba 95       	dec	r27
 78c:	c9 f7       	brne	.-14     	; 0x780 <__fixunssfsi+0x14>
 78e:	14 c0       	rjmp	.+40     	; 0x7b8 <__fixunssfsi+0x4c>
 790:	b1 30       	cpi	r27, 0x01	; 1
 792:	91 f0       	breq	.+36     	; 0x7b8 <__fixunssfsi+0x4c>
 794:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fp_zero>
 798:	b1 e0       	ldi	r27, 0x01	; 1
 79a:	08 95       	ret
 79c:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__fp_zero>
 7a0:	67 2f       	mov	r22, r23
 7a2:	78 2f       	mov	r23, r24
 7a4:	88 27       	eor	r24, r24
 7a6:	b8 5f       	subi	r27, 0xF8	; 248
 7a8:	39 f0       	breq	.+14     	; 0x7b8 <__fixunssfsi+0x4c>
 7aa:	b9 3f       	cpi	r27, 0xF9	; 249
 7ac:	cc f3       	brlt	.-14     	; 0x7a0 <__fixunssfsi+0x34>
 7ae:	86 95       	lsr	r24
 7b0:	77 95       	ror	r23
 7b2:	67 95       	ror	r22
 7b4:	b3 95       	inc	r27
 7b6:	d9 f7       	brne	.-10     	; 0x7ae <__fixunssfsi+0x42>
 7b8:	3e f4       	brtc	.+14     	; 0x7c8 <__fixunssfsi+0x5c>
 7ba:	90 95       	com	r25
 7bc:	80 95       	com	r24
 7be:	70 95       	com	r23
 7c0:	61 95       	neg	r22
 7c2:	7f 4f       	sbci	r23, 0xFF	; 255
 7c4:	8f 4f       	sbci	r24, 0xFF	; 255
 7c6:	9f 4f       	sbci	r25, 0xFF	; 255
 7c8:	08 95       	ret

000007ca <__floatunsisf>:
 7ca:	e8 94       	clt
 7cc:	09 c0       	rjmp	.+18     	; 0x7e0 <__floatsisf+0x12>

000007ce <__floatsisf>:
 7ce:	97 fb       	bst	r25, 7
 7d0:	3e f4       	brtc	.+14     	; 0x7e0 <__floatsisf+0x12>
 7d2:	90 95       	com	r25
 7d4:	80 95       	com	r24
 7d6:	70 95       	com	r23
 7d8:	61 95       	neg	r22
 7da:	7f 4f       	sbci	r23, 0xFF	; 255
 7dc:	8f 4f       	sbci	r24, 0xFF	; 255
 7de:	9f 4f       	sbci	r25, 0xFF	; 255
 7e0:	99 23       	and	r25, r25
 7e2:	a9 f0       	breq	.+42     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7e4:	f9 2f       	mov	r31, r25
 7e6:	96 e9       	ldi	r25, 0x96	; 150
 7e8:	bb 27       	eor	r27, r27
 7ea:	93 95       	inc	r25
 7ec:	f6 95       	lsr	r31
 7ee:	87 95       	ror	r24
 7f0:	77 95       	ror	r23
 7f2:	67 95       	ror	r22
 7f4:	b7 95       	ror	r27
 7f6:	f1 11       	cpse	r31, r1
 7f8:	f8 cf       	rjmp	.-16     	; 0x7ea <__floatsisf+0x1c>
 7fa:	fa f4       	brpl	.+62     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 7fc:	bb 0f       	add	r27, r27
 7fe:	11 f4       	brne	.+4      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 800:	60 ff       	sbrs	r22, 0
 802:	1b c0       	rjmp	.+54     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 804:	6f 5f       	subi	r22, 0xFF	; 255
 806:	7f 4f       	sbci	r23, 0xFF	; 255
 808:	8f 4f       	sbci	r24, 0xFF	; 255
 80a:	9f 4f       	sbci	r25, 0xFF	; 255
 80c:	16 c0       	rjmp	.+44     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 80e:	88 23       	and	r24, r24
 810:	11 f0       	breq	.+4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 812:	96 e9       	ldi	r25, 0x96	; 150
 814:	11 c0       	rjmp	.+34     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 816:	77 23       	and	r23, r23
 818:	21 f0       	breq	.+8      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 81a:	9e e8       	ldi	r25, 0x8E	; 142
 81c:	87 2f       	mov	r24, r23
 81e:	76 2f       	mov	r23, r22
 820:	05 c0       	rjmp	.+10     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 822:	66 23       	and	r22, r22
 824:	71 f0       	breq	.+28     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 826:	96 e8       	ldi	r25, 0x86	; 134
 828:	86 2f       	mov	r24, r22
 82a:	70 e0       	ldi	r23, 0x00	; 0
 82c:	60 e0       	ldi	r22, 0x00	; 0
 82e:	2a f0       	brmi	.+10     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 830:	9a 95       	dec	r25
 832:	66 0f       	add	r22, r22
 834:	77 1f       	adc	r23, r23
 836:	88 1f       	adc	r24, r24
 838:	da f7       	brpl	.-10     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 83a:	88 0f       	add	r24, r24
 83c:	96 95       	lsr	r25
 83e:	87 95       	ror	r24
 840:	97 f9       	bld	r25, 7
 842:	08 95       	ret

00000844 <__fp_inf>:
 844:	97 f9       	bld	r25, 7
 846:	9f 67       	ori	r25, 0x7F	; 127
 848:	80 e8       	ldi	r24, 0x80	; 128
 84a:	70 e0       	ldi	r23, 0x00	; 0
 84c:	60 e0       	ldi	r22, 0x00	; 0
 84e:	08 95       	ret

00000850 <__fp_nan>:
 850:	9f ef       	ldi	r25, 0xFF	; 255
 852:	80 ec       	ldi	r24, 0xC0	; 192
 854:	08 95       	ret

00000856 <__fp_pscA>:
 856:	00 24       	eor	r0, r0
 858:	0a 94       	dec	r0
 85a:	16 16       	cp	r1, r22
 85c:	17 06       	cpc	r1, r23
 85e:	18 06       	cpc	r1, r24
 860:	09 06       	cpc	r0, r25
 862:	08 95       	ret

00000864 <__fp_pscB>:
 864:	00 24       	eor	r0, r0
 866:	0a 94       	dec	r0
 868:	12 16       	cp	r1, r18
 86a:	13 06       	cpc	r1, r19
 86c:	14 06       	cpc	r1, r20
 86e:	05 06       	cpc	r0, r21
 870:	08 95       	ret

00000872 <__fp_round>:
 872:	09 2e       	mov	r0, r25
 874:	03 94       	inc	r0
 876:	00 0c       	add	r0, r0
 878:	11 f4       	brne	.+4      	; 0x87e <__fp_round+0xc>
 87a:	88 23       	and	r24, r24
 87c:	52 f0       	brmi	.+20     	; 0x892 <__fp_round+0x20>
 87e:	bb 0f       	add	r27, r27
 880:	40 f4       	brcc	.+16     	; 0x892 <__fp_round+0x20>
 882:	bf 2b       	or	r27, r31
 884:	11 f4       	brne	.+4      	; 0x88a <__fp_round+0x18>
 886:	60 ff       	sbrs	r22, 0
 888:	04 c0       	rjmp	.+8      	; 0x892 <__fp_round+0x20>
 88a:	6f 5f       	subi	r22, 0xFF	; 255
 88c:	7f 4f       	sbci	r23, 0xFF	; 255
 88e:	8f 4f       	sbci	r24, 0xFF	; 255
 890:	9f 4f       	sbci	r25, 0xFF	; 255
 892:	08 95       	ret

00000894 <__fp_split3>:
 894:	57 fd       	sbrc	r21, 7
 896:	90 58       	subi	r25, 0x80	; 128
 898:	44 0f       	add	r20, r20
 89a:	55 1f       	adc	r21, r21
 89c:	59 f0       	breq	.+22     	; 0x8b4 <__fp_splitA+0x10>
 89e:	5f 3f       	cpi	r21, 0xFF	; 255
 8a0:	71 f0       	breq	.+28     	; 0x8be <__fp_splitA+0x1a>
 8a2:	47 95       	ror	r20

000008a4 <__fp_splitA>:
 8a4:	88 0f       	add	r24, r24
 8a6:	97 fb       	bst	r25, 7
 8a8:	99 1f       	adc	r25, r25
 8aa:	61 f0       	breq	.+24     	; 0x8c4 <__fp_splitA+0x20>
 8ac:	9f 3f       	cpi	r25, 0xFF	; 255
 8ae:	79 f0       	breq	.+30     	; 0x8ce <__fp_splitA+0x2a>
 8b0:	87 95       	ror	r24
 8b2:	08 95       	ret
 8b4:	12 16       	cp	r1, r18
 8b6:	13 06       	cpc	r1, r19
 8b8:	14 06       	cpc	r1, r20
 8ba:	55 1f       	adc	r21, r21
 8bc:	f2 cf       	rjmp	.-28     	; 0x8a2 <__fp_split3+0xe>
 8be:	46 95       	lsr	r20
 8c0:	f1 df       	rcall	.-30     	; 0x8a4 <__fp_splitA>
 8c2:	08 c0       	rjmp	.+16     	; 0x8d4 <__fp_splitA+0x30>
 8c4:	16 16       	cp	r1, r22
 8c6:	17 06       	cpc	r1, r23
 8c8:	18 06       	cpc	r1, r24
 8ca:	99 1f       	adc	r25, r25
 8cc:	f1 cf       	rjmp	.-30     	; 0x8b0 <__fp_splitA+0xc>
 8ce:	86 95       	lsr	r24
 8d0:	71 05       	cpc	r23, r1
 8d2:	61 05       	cpc	r22, r1
 8d4:	08 94       	sec
 8d6:	08 95       	ret

000008d8 <__fp_zero>:
 8d8:	e8 94       	clt

000008da <__fp_szero>:
 8da:	bb 27       	eor	r27, r27
 8dc:	66 27       	eor	r22, r22
 8de:	77 27       	eor	r23, r23
 8e0:	cb 01       	movw	r24, r22
 8e2:	97 f9       	bld	r25, 7
 8e4:	08 95       	ret

000008e6 <__mulsf3>:
 8e6:	0e 94 86 04 	call	0x90c	; 0x90c <__mulsf3x>
 8ea:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_round>
 8ee:	0e 94 2b 04 	call	0x856	; 0x856 <__fp_pscA>
 8f2:	38 f0       	brcs	.+14     	; 0x902 <__stack+0x3>
 8f4:	0e 94 32 04 	call	0x864	; 0x864 <__fp_pscB>
 8f8:	20 f0       	brcs	.+8      	; 0x902 <__stack+0x3>
 8fa:	95 23       	and	r25, r21
 8fc:	11 f0       	breq	.+4      	; 0x902 <__stack+0x3>
 8fe:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_inf>
 902:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_nan>
 906:	11 24       	eor	r1, r1
 908:	0c 94 6d 04 	jmp	0x8da	; 0x8da <__fp_szero>

0000090c <__mulsf3x>:
 90c:	0e 94 4a 04 	call	0x894	; 0x894 <__fp_split3>
 910:	70 f3       	brcs	.-36     	; 0x8ee <__mulsf3+0x8>

00000912 <__mulsf3_pse>:
 912:	95 9f       	mul	r25, r21
 914:	c1 f3       	breq	.-16     	; 0x906 <__stack+0x7>
 916:	95 0f       	add	r25, r21
 918:	50 e0       	ldi	r21, 0x00	; 0
 91a:	55 1f       	adc	r21, r21
 91c:	62 9f       	mul	r22, r18
 91e:	f0 01       	movw	r30, r0
 920:	72 9f       	mul	r23, r18
 922:	bb 27       	eor	r27, r27
 924:	f0 0d       	add	r31, r0
 926:	b1 1d       	adc	r27, r1
 928:	63 9f       	mul	r22, r19
 92a:	aa 27       	eor	r26, r26
 92c:	f0 0d       	add	r31, r0
 92e:	b1 1d       	adc	r27, r1
 930:	aa 1f       	adc	r26, r26
 932:	64 9f       	mul	r22, r20
 934:	66 27       	eor	r22, r22
 936:	b0 0d       	add	r27, r0
 938:	a1 1d       	adc	r26, r1
 93a:	66 1f       	adc	r22, r22
 93c:	82 9f       	mul	r24, r18
 93e:	22 27       	eor	r18, r18
 940:	b0 0d       	add	r27, r0
 942:	a1 1d       	adc	r26, r1
 944:	62 1f       	adc	r22, r18
 946:	73 9f       	mul	r23, r19
 948:	b0 0d       	add	r27, r0
 94a:	a1 1d       	adc	r26, r1
 94c:	62 1f       	adc	r22, r18
 94e:	83 9f       	mul	r24, r19
 950:	a0 0d       	add	r26, r0
 952:	61 1d       	adc	r22, r1
 954:	22 1f       	adc	r18, r18
 956:	74 9f       	mul	r23, r20
 958:	33 27       	eor	r19, r19
 95a:	a0 0d       	add	r26, r0
 95c:	61 1d       	adc	r22, r1
 95e:	23 1f       	adc	r18, r19
 960:	84 9f       	mul	r24, r20
 962:	60 0d       	add	r22, r0
 964:	21 1d       	adc	r18, r1
 966:	82 2f       	mov	r24, r18
 968:	76 2f       	mov	r23, r22
 96a:	6a 2f       	mov	r22, r26
 96c:	11 24       	eor	r1, r1
 96e:	9f 57       	subi	r25, 0x7F	; 127
 970:	50 40       	sbci	r21, 0x00	; 0
 972:	9a f0       	brmi	.+38     	; 0x99a <__mulsf3_pse+0x88>
 974:	f1 f0       	breq	.+60     	; 0x9b2 <__mulsf3_pse+0xa0>
 976:	88 23       	and	r24, r24
 978:	4a f0       	brmi	.+18     	; 0x98c <__mulsf3_pse+0x7a>
 97a:	ee 0f       	add	r30, r30
 97c:	ff 1f       	adc	r31, r31
 97e:	bb 1f       	adc	r27, r27
 980:	66 1f       	adc	r22, r22
 982:	77 1f       	adc	r23, r23
 984:	88 1f       	adc	r24, r24
 986:	91 50       	subi	r25, 0x01	; 1
 988:	50 40       	sbci	r21, 0x00	; 0
 98a:	a9 f7       	brne	.-22     	; 0x976 <__mulsf3_pse+0x64>
 98c:	9e 3f       	cpi	r25, 0xFE	; 254
 98e:	51 05       	cpc	r21, r1
 990:	80 f0       	brcs	.+32     	; 0x9b2 <__mulsf3_pse+0xa0>
 992:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_inf>
 996:	0c 94 6d 04 	jmp	0x8da	; 0x8da <__fp_szero>
 99a:	5f 3f       	cpi	r21, 0xFF	; 255
 99c:	e4 f3       	brlt	.-8      	; 0x996 <__mulsf3_pse+0x84>
 99e:	98 3e       	cpi	r25, 0xE8	; 232
 9a0:	d4 f3       	brlt	.-12     	; 0x996 <__mulsf3_pse+0x84>
 9a2:	86 95       	lsr	r24
 9a4:	77 95       	ror	r23
 9a6:	67 95       	ror	r22
 9a8:	b7 95       	ror	r27
 9aa:	f7 95       	ror	r31
 9ac:	e7 95       	ror	r30
 9ae:	9f 5f       	subi	r25, 0xFF	; 255
 9b0:	c1 f7       	brne	.-16     	; 0x9a2 <__mulsf3_pse+0x90>
 9b2:	fe 2b       	or	r31, r30
 9b4:	88 0f       	add	r24, r24
 9b6:	91 1d       	adc	r25, r1
 9b8:	96 95       	lsr	r25
 9ba:	87 95       	ror	r24
 9bc:	97 f9       	bld	r25, 7
 9be:	08 95       	ret

000009c0 <__divmodhi4>:
 9c0:	97 fb       	bst	r25, 7
 9c2:	07 2e       	mov	r0, r23
 9c4:	16 f4       	brtc	.+4      	; 0x9ca <__divmodhi4+0xa>
 9c6:	00 94       	com	r0
 9c8:	07 d0       	rcall	.+14     	; 0x9d8 <__divmodhi4_neg1>
 9ca:	77 fd       	sbrc	r23, 7
 9cc:	09 d0       	rcall	.+18     	; 0x9e0 <__divmodhi4_neg2>
 9ce:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__udivmodhi4>
 9d2:	07 fc       	sbrc	r0, 7
 9d4:	05 d0       	rcall	.+10     	; 0x9e0 <__divmodhi4_neg2>
 9d6:	3e f4       	brtc	.+14     	; 0x9e6 <__divmodhi4_exit>

000009d8 <__divmodhi4_neg1>:
 9d8:	90 95       	com	r25
 9da:	81 95       	neg	r24
 9dc:	9f 4f       	sbci	r25, 0xFF	; 255
 9de:	08 95       	ret

000009e0 <__divmodhi4_neg2>:
 9e0:	70 95       	com	r23
 9e2:	61 95       	neg	r22
 9e4:	7f 4f       	sbci	r23, 0xFF	; 255

000009e6 <__divmodhi4_exit>:
 9e6:	08 95       	ret

000009e8 <__udivmodhi4>:
 9e8:	aa 1b       	sub	r26, r26
 9ea:	bb 1b       	sub	r27, r27
 9ec:	51 e1       	ldi	r21, 0x11	; 17
 9ee:	07 c0       	rjmp	.+14     	; 0x9fe <__udivmodhi4_ep>

000009f0 <__udivmodhi4_loop>:
 9f0:	aa 1f       	adc	r26, r26
 9f2:	bb 1f       	adc	r27, r27
 9f4:	a6 17       	cp	r26, r22
 9f6:	b7 07       	cpc	r27, r23
 9f8:	10 f0       	brcs	.+4      	; 0x9fe <__udivmodhi4_ep>
 9fa:	a6 1b       	sub	r26, r22
 9fc:	b7 0b       	sbc	r27, r23

000009fe <__udivmodhi4_ep>:
 9fe:	88 1f       	adc	r24, r24
 a00:	99 1f       	adc	r25, r25
 a02:	5a 95       	dec	r21
 a04:	a9 f7       	brne	.-22     	; 0x9f0 <__udivmodhi4_loop>
 a06:	80 95       	com	r24
 a08:	90 95       	com	r25
 a0a:	bc 01       	movw	r22, r24
 a0c:	cd 01       	movw	r24, r26
 a0e:	08 95       	ret

00000a10 <_exit>:
 a10:	f8 94       	cli

00000a12 <__stop_program>:
 a12:	ff cf       	rjmp	.-2      	; 0xa12 <__stop_program>
