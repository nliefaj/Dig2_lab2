
lab2_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a6b  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000752  00000000  00000000  00000d77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f6  00000000  00000000  000014c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000018c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d6  00000000  00000000  00001938  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000222  00000000  00000000  00001d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001f30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  78:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <port_disp>:
	//E=0;
	PORTD&=~(1<<PORTD3);
}

void port_disp(char a){
	if (a&1)
  80:	80 ff       	sbrs	r24, 0
  82:	04 c0       	rjmp	.+8      	; 0x8c <port_disp+0xc>
	PORTD|=(1<<PORTD4);
  84:	9b b1       	in	r25, 0x0b	; 11
  86:	90 61       	ori	r25, 0x10	; 16
  88:	9b b9       	out	0x0b, r25	; 11
  8a:	03 c0       	rjmp	.+6      	; 0x92 <port_disp+0x12>
	else
	PORTD&=~(1<<PORTD4);
  8c:	9b b1       	in	r25, 0x0b	; 11
  8e:	9f 7e       	andi	r25, 0xEF	; 239
  90:	9b b9       	out	0x0b, r25	; 11
	
	if (a&2)
  92:	81 ff       	sbrs	r24, 1
  94:	04 c0       	rjmp	.+8      	; 0x9e <port_disp+0x1e>
	PORTD|=(1<<PORTD5);
  96:	9b b1       	in	r25, 0x0b	; 11
  98:	90 62       	ori	r25, 0x20	; 32
  9a:	9b b9       	out	0x0b, r25	; 11
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <port_disp+0x24>
	else
	PORTD&=~(1<<PORTD5);
  9e:	9b b1       	in	r25, 0x0b	; 11
  a0:	9f 7d       	andi	r25, 0xDF	; 223
  a2:	9b b9       	out	0x0b, r25	; 11
	
	if (a&4)
  a4:	82 ff       	sbrs	r24, 2
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <port_disp+0x30>
	PORTD|=(1<<PORTD6);
  a8:	9b b1       	in	r25, 0x0b	; 11
  aa:	90 64       	ori	r25, 0x40	; 64
  ac:	9b b9       	out	0x0b, r25	; 11
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <port_disp+0x36>
	else
	PORTD&=~(1<<PORTD6);
  b0:	9b b1       	in	r25, 0x0b	; 11
  b2:	9f 7b       	andi	r25, 0xBF	; 191
  b4:	9b b9       	out	0x0b, r25	; 11
	
	if (a&8)
  b6:	83 ff       	sbrs	r24, 3
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <port_disp+0x42>
	PORTD|=(1<<PORTD7);
  ba:	9b b1       	in	r25, 0x0b	; 11
  bc:	90 68       	ori	r25, 0x80	; 128
  be:	9b b9       	out	0x0b, r25	; 11
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <port_disp+0x48>
	else
	PORTD&=~(1<<PORTD7);
  c2:	9b b1       	in	r25, 0x0b	; 11
  c4:	9f 77       	andi	r25, 0x7F	; 127
  c6:	9b b9       	out	0x0b, r25	; 11
	
	if (a&16)
  c8:	84 ff       	sbrs	r24, 4
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <port_disp+0x54>
	PORTB|=(1<<PORTB0);
  cc:	95 b1       	in	r25, 0x05	; 5
  ce:	91 60       	ori	r25, 0x01	; 1
  d0:	95 b9       	out	0x05, r25	; 5
  d2:	03 c0       	rjmp	.+6      	; 0xda <port_disp+0x5a>
	else
	PORTB&=~(1<<PORTB0);
  d4:	95 b1       	in	r25, 0x05	; 5
  d6:	9e 7f       	andi	r25, 0xFE	; 254
  d8:	95 b9       	out	0x05, r25	; 5
	
	if (a&32)
  da:	85 ff       	sbrs	r24, 5
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <port_disp+0x66>
	PORTB|=(1<<PORTB1);
  de:	95 b1       	in	r25, 0x05	; 5
  e0:	92 60       	ori	r25, 0x02	; 2
  e2:	95 b9       	out	0x05, r25	; 5
  e4:	03 c0       	rjmp	.+6      	; 0xec <port_disp+0x6c>
	else
	PORTB&=~(1<<PORTB1);
  e6:	95 b1       	in	r25, 0x05	; 5
  e8:	9d 7f       	andi	r25, 0xFD	; 253
  ea:	95 b9       	out	0x05, r25	; 5
	
	if (a&64)
  ec:	86 ff       	sbrs	r24, 6
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <port_disp+0x78>
	PORTB|=(1<<PORTB2);
  f0:	95 b1       	in	r25, 0x05	; 5
  f2:	94 60       	ori	r25, 0x04	; 4
  f4:	95 b9       	out	0x05, r25	; 5
  f6:	03 c0       	rjmp	.+6      	; 0xfe <port_disp+0x7e>
	else
	PORTB&=~(1<<PORTB2);
  f8:	95 b1       	in	r25, 0x05	; 5
  fa:	9b 7f       	andi	r25, 0xFB	; 251
  fc:	95 b9       	out	0x05, r25	; 5
	
	if (a&128)
  fe:	88 23       	and	r24, r24
 100:	24 f4       	brge	.+8      	; 0x10a <port_disp+0x8a>
	PORTB|=(1<<PORTB3);
 102:	85 b1       	in	r24, 0x05	; 5
 104:	88 60       	ori	r24, 0x08	; 8
 106:	85 b9       	out	0x05, r24	; 5
 108:	08 95       	ret
	else
	PORTB&=~(1<<PORTB3);
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	87 7f       	andi	r24, 0xF7	; 247
 10e:	85 b9       	out	0x05, r24	; 5
 110:	08 95       	ret

00000112 <comandos_LCD>:
	comandos_LCD(0b0001);	
}

void comandos_LCD(char a){
	//RS=0;
	PORTD&=~(1<<PORTD2);
 112:	9b b1       	in	r25, 0x0b	; 11
 114:	9b 7f       	andi	r25, 0xFB	; 251
 116:	9b b9       	out	0x0b, r25	; 11
	port_disp(a);
 118:	0e 94 40 00 	call	0x80	; 0x80 <port_disp>
	//enable=1;
	PORTD|=(1<<PORTD3);
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	88 60       	ori	r24, 0x08	; 8
 120:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	8f e7       	ldi	r24, 0x7F	; 127
 124:	9e e3       	ldi	r25, 0x3E	; 62
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <comandos_LCD+0x14>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <comandos_LCD+0x1a>
 12c:	00 00       	nop
	_delay_ms(4);
	//E=0;
	PORTD&=~(1<<PORTD3);
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	87 7f       	andi	r24, 0xF7	; 247
 132:	8b b9       	out	0x0b, r24	; 11
 134:	08 95       	ret

00000136 <initLCD8b>:
 * Created: 1/30/2025 6:05:55 PM
 *  Author: njfg0
 */ 
#include "lcd.h"
void initLCD8b(void){
	DDRD|=(1<<DDD7)|(1<<DDD6)|(1<<DDD5)|(1<<DDD4)|(1<<DDD3)|(1<<DDD2);
 136:	8a b1       	in	r24, 0x0a	; 10
 138:	8c 6f       	ori	r24, 0xFC	; 252
 13a:	8a b9       	out	0x0a, r24	; 10
	DDRB|=(1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB3);
 13c:	84 b1       	in	r24, 0x04	; 4
 13e:	8f 60       	ori	r24, 0x0F	; 15
 140:	84 b9       	out	0x04, r24	; 4
	PORTB=0;
 142:	15 b8       	out	0x05, r1	; 5
	PORTD=0;
 144:	1b b8       	out	0x0b, r1	; 11
	
	port_disp(0x00);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 40 00 	call	0x80	; 0x80 <port_disp>
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	89 ef       	ldi	r24, 0xF9	; 249
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <initLCD8b+0x1c>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <initLCD8b+0x26>
 15c:	00 00       	nop
	_delay_ms(20);
	
	//function set
	comandos_LCD(0b00111000);
 15e:	88 e3       	ldi	r24, 0x38	; 56
 160:	0e 94 89 00 	call	0x112	; 0x112 <comandos_LCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	8f e8       	ldi	r24, 0x8F	; 143
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <initLCD8b+0x32>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <initLCD8b+0x38>
 16e:	00 00       	nop
	_delay_us(100);
	
	//display on/off
	comandos_LCD(0b1100);
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	0e 94 89 00 	call	0x112	; 0x112 <comandos_LCD>
 176:	8f e8       	ldi	r24, 0x8F	; 143
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <initLCD8b+0x44>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <initLCD8b+0x4a>
 180:	00 00       	nop
	_delay_us(100);
	
	//Entry mode
	comandos_LCD(0b0110);
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	0e 94 89 00 	call	0x112	; 0x112 <comandos_LCD>
 188:	8f e8       	ldi	r24, 0x8F	; 143
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <initLCD8b+0x56>
 190:	00 c0       	rjmp	.+0      	; 0x192 <initLCD8b+0x5c>
 192:	00 00       	nop
	_delay_us(100);
	
	//clear display
	comandos_LCD(0b0001);	
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 89 00 	call	0x112	; 0x112 <comandos_LCD>
 19a:	08 95       	ret

0000019c <LCD_write_char>:
	PORTB&=~(1<<PORTB3);
}

void LCD_write_char(char d){
	//RS=1
	PORTD|=(1<<PORTD2);
 19c:	9b b1       	in	r25, 0x0b	; 11
 19e:	94 60       	ori	r25, 0x04	; 4
 1a0:	9b b9       	out	0x0b, r25	; 11
	port_disp(d);
 1a2:	0e 94 40 00 	call	0x80	; 0x80 <port_disp>
	//E=1
	PORTD|=(1<<PORTD3);
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	88 60       	ori	r24, 0x08	; 8
 1aa:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	8f e7       	ldi	r24, 0x7F	; 127
 1ae:	9e e3       	ldi	r25, 0x3E	; 62
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCD_write_char+0x14>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <LCD_write_char+0x1a>
 1b6:	00 00       	nop
	_delay_ms(4);
	//E=0
	PORTD&=~(1<<PORTD3);
 1b8:	8b b1       	in	r24, 0x0b	; 11
 1ba:	87 7f       	andi	r24, 0xF7	; 247
 1bc:	8b b9       	out	0x0b, r24	; 11
 1be:	08 95       	ret

000001c0 <main>:
#include "lcd/lcd.h"


int main(void)
{	
	initLCD8b();
 1c0:	0e 94 9b 00 	call	0x136	; 0x136 <initLCD8b>
	LCD_write_char('H');
 1c4:	88 e4       	ldi	r24, 0x48	; 72
 1c6:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_char>
	LCD_write_char('O');
 1ca:	8f e4       	ldi	r24, 0x4F	; 79
 1cc:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_char>
	LCD_write_char('L');
 1d0:	8c e4       	ldi	r24, 0x4C	; 76
 1d2:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_char>
	LCD_write_char('A');
 1d6:	81 e4       	ldi	r24, 0x41	; 65
 1d8:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_char>
	LCD_write_char('2');
 1dc:	82 e3       	ldi	r24, 0x32	; 50
 1de:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_char>
	LCD_write_char('3');
 1e2:	83 e3       	ldi	r24, 0x33	; 51
 1e4:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_char>
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <main+0x28>

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
