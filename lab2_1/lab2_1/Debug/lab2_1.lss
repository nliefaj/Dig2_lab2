
lab2_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000934  000009c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000934  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010c  0080010c  000009d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d9b  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000860  00000000  00000000  0000186f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006bb  00000000  00000000  000020cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  0000278c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c7  00000000  00000000  00002898  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000052f  00000000  00000000  00002d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000328e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 41 02 	jmp	0x482	; 0x482 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  9e:	0c 94 98 04 	jmp	0x930	; 0x930 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initadc>:
 * Created: 2/5/2025 11:45:01 PM
 *  Author: njfg0
 */ 
#include "adc.h"
void initadc(void){
ADMUX=0;
  a6:	ac e7       	ldi	r26, 0x7C	; 124
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	1c 92       	st	X, r1
ADCSRA=0;
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	10 82       	st	Z, r1

ADMUX|=(1<<REFS0);
  b2:	8c 91       	ld	r24, X
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	8c 93       	st	X, r24
ADMUX|=(1<<ADLAR);
  b8:	8c 91       	ld	r24, X
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	8c 93       	st	X, r24
ADCSRA=0;
  be:	10 82       	st	Z, r1
ADCSRA|=(1<<ADEN)|(1<<ADIE);
  c0:	80 81       	ld	r24, Z
  c2:	88 68       	ori	r24, 0x88	; 136
  c4:	80 83       	st	Z, r24
ADCSRA|=(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  c6:	80 81       	ld	r24, Z
  c8:	87 60       	ori	r24, 0x07	; 7
  ca:	80 83       	st	Z, r24

ADCSRB=0;
  cc:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  d0:	08 95       	ret

000000d2 <port_disp>:
	//E=0;
	PORTD&=~(1<<PORTD3);
}

void port_disp(char a){
	if (a&1)
  d2:	80 ff       	sbrs	r24, 0
  d4:	04 c0       	rjmp	.+8      	; 0xde <port_disp+0xc>
	PORTD|=(1<<PORTD4);
  d6:	9b b1       	in	r25, 0x0b	; 11
  d8:	90 61       	ori	r25, 0x10	; 16
  da:	9b b9       	out	0x0b, r25	; 11
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <port_disp+0x12>
	else
	PORTD&=~(1<<PORTD4);
  de:	9b b1       	in	r25, 0x0b	; 11
  e0:	9f 7e       	andi	r25, 0xEF	; 239
  e2:	9b b9       	out	0x0b, r25	; 11
	
	if (a&2)
  e4:	81 ff       	sbrs	r24, 1
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <port_disp+0x1e>
	PORTD|=(1<<PORTD5);
  e8:	9b b1       	in	r25, 0x0b	; 11
  ea:	90 62       	ori	r25, 0x20	; 32
  ec:	9b b9       	out	0x0b, r25	; 11
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <port_disp+0x24>
	else
	PORTD&=~(1<<PORTD5);
  f0:	9b b1       	in	r25, 0x0b	; 11
  f2:	9f 7d       	andi	r25, 0xDF	; 223
  f4:	9b b9       	out	0x0b, r25	; 11
	
	if (a&4)
  f6:	82 ff       	sbrs	r24, 2
  f8:	04 c0       	rjmp	.+8      	; 0x102 <port_disp+0x30>
	PORTD|=(1<<PORTD6);
  fa:	9b b1       	in	r25, 0x0b	; 11
  fc:	90 64       	ori	r25, 0x40	; 64
  fe:	9b b9       	out	0x0b, r25	; 11
 100:	03 c0       	rjmp	.+6      	; 0x108 <port_disp+0x36>
	else
	PORTD&=~(1<<PORTD6);
 102:	9b b1       	in	r25, 0x0b	; 11
 104:	9f 7b       	andi	r25, 0xBF	; 191
 106:	9b b9       	out	0x0b, r25	; 11
	
	if (a&8)
 108:	83 ff       	sbrs	r24, 3
 10a:	04 c0       	rjmp	.+8      	; 0x114 <port_disp+0x42>
	PORTD|=(1<<PORTD7);
 10c:	9b b1       	in	r25, 0x0b	; 11
 10e:	90 68       	ori	r25, 0x80	; 128
 110:	9b b9       	out	0x0b, r25	; 11
 112:	03 c0       	rjmp	.+6      	; 0x11a <port_disp+0x48>
	else
	PORTD&=~(1<<PORTD7);
 114:	9b b1       	in	r25, 0x0b	; 11
 116:	9f 77       	andi	r25, 0x7F	; 127
 118:	9b b9       	out	0x0b, r25	; 11
	
	if (a&16)
 11a:	84 ff       	sbrs	r24, 4
 11c:	04 c0       	rjmp	.+8      	; 0x126 <port_disp+0x54>
	PORTB|=(1<<PORTB0);
 11e:	95 b1       	in	r25, 0x05	; 5
 120:	91 60       	ori	r25, 0x01	; 1
 122:	95 b9       	out	0x05, r25	; 5
 124:	03 c0       	rjmp	.+6      	; 0x12c <port_disp+0x5a>
	else
	PORTB&=~(1<<PORTB0);
 126:	95 b1       	in	r25, 0x05	; 5
 128:	9e 7f       	andi	r25, 0xFE	; 254
 12a:	95 b9       	out	0x05, r25	; 5
	
	if (a&32)
 12c:	85 ff       	sbrs	r24, 5
 12e:	04 c0       	rjmp	.+8      	; 0x138 <port_disp+0x66>
	PORTB|=(1<<PORTB1);
 130:	95 b1       	in	r25, 0x05	; 5
 132:	92 60       	ori	r25, 0x02	; 2
 134:	95 b9       	out	0x05, r25	; 5
 136:	03 c0       	rjmp	.+6      	; 0x13e <port_disp+0x6c>
	else
	PORTB&=~(1<<PORTB1);
 138:	95 b1       	in	r25, 0x05	; 5
 13a:	9d 7f       	andi	r25, 0xFD	; 253
 13c:	95 b9       	out	0x05, r25	; 5
	
	if (a&64)
 13e:	86 ff       	sbrs	r24, 6
 140:	04 c0       	rjmp	.+8      	; 0x14a <port_disp+0x78>
	PORTB|=(1<<PORTB2);
 142:	95 b1       	in	r25, 0x05	; 5
 144:	94 60       	ori	r25, 0x04	; 4
 146:	95 b9       	out	0x05, r25	; 5
 148:	03 c0       	rjmp	.+6      	; 0x150 <port_disp+0x7e>
	else
	PORTB&=~(1<<PORTB2);
 14a:	95 b1       	in	r25, 0x05	; 5
 14c:	9b 7f       	andi	r25, 0xFB	; 251
 14e:	95 b9       	out	0x05, r25	; 5
	
	if (a&128)
 150:	88 23       	and	r24, r24
 152:	24 f4       	brge	.+8      	; 0x15c <port_disp+0x8a>
	PORTB|=(1<<PORTB3);
 154:	85 b1       	in	r24, 0x05	; 5
 156:	88 60       	ori	r24, 0x08	; 8
 158:	85 b9       	out	0x05, r24	; 5
 15a:	08 95       	ret
	else
	PORTB&=~(1<<PORTB3);
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	87 7f       	andi	r24, 0xF7	; 247
 160:	85 b9       	out	0x05, r24	; 5
 162:	08 95       	ret

00000164 <comandos_LCD>:
	comandos_LCD(0b0001);	
}

void comandos_LCD(char a){
	//RS=0;
	PORTD&=~(1<<PORTD2);
 164:	9b b1       	in	r25, 0x0b	; 11
 166:	9b 7f       	andi	r25, 0xFB	; 251
 168:	9b b9       	out	0x0b, r25	; 11
	port_disp(a);
 16a:	0e 94 69 00 	call	0xd2	; 0xd2 <port_disp>
	//enable=1;
	PORTD|=(1<<PORTD3);
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	88 60       	ori	r24, 0x08	; 8
 172:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	8f e7       	ldi	r24, 0x7F	; 127
 176:	9e e3       	ldi	r25, 0x3E	; 62
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <comandos_LCD+0x14>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <comandos_LCD+0x1a>
 17e:	00 00       	nop
	_delay_ms(4);
	//E=0;
	PORTD&=~(1<<PORTD3);
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	87 7f       	andi	r24, 0xF7	; 247
 184:	8b b9       	out	0x0b, r24	; 11
 186:	08 95       	ret

00000188 <initLCD8b>:
 * Created: 1/30/2025 6:05:55 PM
 *  Author: njfg0
 */ 
#include "lcd.h"
void initLCD8b(void){
	DDRD|=(1<<DDD7)|(1<<DDD6)|(1<<DDD5)|(1<<DDD4)|(1<<DDD3)|(1<<DDD2);
 188:	8a b1       	in	r24, 0x0a	; 10
 18a:	8c 6f       	ori	r24, 0xFC	; 252
 18c:	8a b9       	out	0x0a, r24	; 10
	DDRB|=(1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB3);
 18e:	84 b1       	in	r24, 0x04	; 4
 190:	8f 60       	ori	r24, 0x0F	; 15
 192:	84 b9       	out	0x04, r24	; 4
	PORTB=0;
 194:	15 b8       	out	0x05, r1	; 5
	PORTD=0;
 196:	1b b8       	out	0x0b, r1	; 11
	
	port_disp(0x00);
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 69 00 	call	0xd2	; 0xd2 <port_disp>
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	89 ef       	ldi	r24, 0xF9	; 249
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <initLCD8b+0x1c>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <initLCD8b+0x26>
 1ae:	00 00       	nop
	_delay_ms(20);
	
	//function set
	comandos_LCD(0b00111000);
 1b0:	88 e3       	ldi	r24, 0x38	; 56
 1b2:	0e 94 b2 00 	call	0x164	; 0x164 <comandos_LCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	8f e8       	ldi	r24, 0x8F	; 143
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <initLCD8b+0x32>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <initLCD8b+0x38>
 1c0:	00 00       	nop
	_delay_us(100);
	
	//display on/off
	comandos_LCD(0b1100);
 1c2:	8c e0       	ldi	r24, 0x0C	; 12
 1c4:	0e 94 b2 00 	call	0x164	; 0x164 <comandos_LCD>
 1c8:	8f e8       	ldi	r24, 0x8F	; 143
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <initLCD8b+0x44>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <initLCD8b+0x4a>
 1d2:	00 00       	nop
	_delay_us(100);
	
	//Entry mode
	comandos_LCD(0b0110);
 1d4:	86 e0       	ldi	r24, 0x06	; 6
 1d6:	0e 94 b2 00 	call	0x164	; 0x164 <comandos_LCD>
 1da:	8f e8       	ldi	r24, 0x8F	; 143
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <initLCD8b+0x56>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <initLCD8b+0x5c>
 1e4:	00 00       	nop
	_delay_us(100);
	
	//clear display
	comandos_LCD(0b0001);	
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 b2 00 	call	0x164	; 0x164 <comandos_LCD>
 1ec:	08 95       	ret

000001ee <LCD_write_char>:
}

void LCD_write_char(char d){
	//manda y escribe el mensaje
	//RS=1
	PORTD|=(1<<PORTD2);
 1ee:	9b b1       	in	r25, 0x0b	; 11
 1f0:	94 60       	ori	r25, 0x04	; 4
 1f2:	9b b9       	out	0x0b, r25	; 11
	port_disp(d);
 1f4:	0e 94 69 00 	call	0xd2	; 0xd2 <port_disp>
	//E=1
	PORTD|=(1<<PORTD3);
 1f8:	8b b1       	in	r24, 0x0b	; 11
 1fa:	88 60       	ori	r24, 0x08	; 8
 1fc:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fe:	8f e7       	ldi	r24, 0x7F	; 127
 200:	9e e3       	ldi	r25, 0x3E	; 62
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <LCD_write_char+0x14>
 206:	00 c0       	rjmp	.+0      	; 0x208 <LCD_write_char+0x1a>
 208:	00 00       	nop
	_delay_ms(4);
	//E=0
	PORTD&=~(1<<PORTD3);
 20a:	8b b1       	in	r24, 0x0b	; 11
 20c:	87 7f       	andi	r24, 0xF7	; 247
 20e:	8b b9       	out	0x0b, r24	; 11
 210:	08 95       	ret

00000212 <LCD_write_String>:
	
}

void LCD_write_String(char *a){
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	8c 01       	movw	r16, r24
	int i;
	for (i=0;a[i]!='\0';i++)
 21c:	c0 e0       	ldi	r28, 0x00	; 0
 21e:	d0 e0       	ldi	r29, 0x00	; 0
 220:	03 c0       	rjmp	.+6      	; 0x228 <LCD_write_String+0x16>
	LCD_write_char(a[i]);
 222:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_write_char>
	
}

void LCD_write_String(char *a){
	int i;
	for (i=0;a[i]!='\0';i++)
 226:	21 96       	adiw	r28, 0x01	; 1
 228:	f8 01       	movw	r30, r16
 22a:	ec 0f       	add	r30, r28
 22c:	fd 1f       	adc	r31, r29
 22e:	80 81       	ld	r24, Z
 230:	81 11       	cpse	r24, r1
 232:	f7 cf       	rjmp	.-18     	; 0x222 <LCD_write_String+0x10>
	LCD_write_char(a[i]);
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	08 95       	ret

0000023e <LCD_Set_Cursor>:

	
	
void LCD_Set_Cursor(char c, char f){
	char temp;
	if (f==1){
 23e:	61 30       	cpi	r22, 0x01	; 1
 240:	21 f4       	brne	.+8      	; 0x24a <LCD_Set_Cursor+0xc>
		temp=0x80+c;
		comandos_LCD(temp);
 242:	80 58       	subi	r24, 0x80	; 128
 244:	0e 94 b2 00 	call	0x164	; 0x164 <comandos_LCD>
 248:	08 95       	ret
	}else if(f==2){
 24a:	62 30       	cpi	r22, 0x02	; 2
 24c:	19 f4       	brne	.+6      	; 0x254 <LCD_Set_Cursor+0x16>
		temp=0xC0+c;
		comandos_LCD(temp);
 24e:	80 54       	subi	r24, 0x40	; 64
 250:	0e 94 b2 00 	call	0x164	; 0x164 <comandos_LCD>
 254:	08 95       	ret

00000256 <main>:
uint8_t change_value_pot1=0;
uint8_t change_value_pot2=0;


int main(void)
{	
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	2e 97       	sbiw	r28, 0x0e	; 14
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	de bf       	out	0x3e, r29	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	cd bf       	out	0x3d, r28	; 61
	cli();
 26a:	f8 94       	cli
	initLCD8b();
 26c:	0e 94 c4 00 	call	0x188	; 0x188 <initLCD8b>
	initadc();
 270:	0e 94 53 00 	call	0xa6	; 0xa6 <initadc>
	ADCSRA|=(1<<ADSC);
 274:	ea e7       	ldi	r30, 0x7A	; 122
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	80 64       	ori	r24, 0x40	; 64
 27c:	80 83       	st	Z, r24
	sei();
 27e:	78 94       	sei
	LCD_Set_Cursor(1,1);
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_Set_Cursor>
	LCD_write_String("S1:");
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	0e 94 09 01 	call	0x212	; 0x212 <LCD_write_String>
	LCD_Set_Cursor(7,1);
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	87 e0       	ldi	r24, 0x07	; 7
 294:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_Set_Cursor>
	LCD_write_String("S2:");
 298:	84 e0       	ldi	r24, 0x04	; 4
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 09 01 	call	0x212	; 0x212 <LCD_write_String>
	LCD_Set_Cursor(13,1);
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	8d e0       	ldi	r24, 0x0D	; 13
 2a4:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_Set_Cursor>
	LCD_write_String("S3:");
 2a8:	88 e0       	ldi	r24, 0x08	; 8
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	0e 94 09 01 	call	0x212	; 0x212 <LCD_write_String>
	
	uint16_t prev_valor_pot1 = 255;
	uint16_t prev_valor_pot2 = 255;
 2b0:	ee 24       	eor	r14, r14
 2b2:	ea 94       	dec	r14
 2b4:	f1 2c       	mov	r15, r1
	LCD_Set_Cursor(7,1);
	LCD_write_String("S2:");
	LCD_Set_Cursor(13,1);
	LCD_write_String("S3:");
	
	uint16_t prev_valor_pot1 = 255;
 2b6:	2f ef       	ldi	r18, 0xFF	; 255
 2b8:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t prev_valor_pot2 = 255;
    /* Replace with your application code */
    while (1) 
    {
		if (change_value_pot1==1||change_value_pot2==1){
 2ba:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <change_value_pot1>
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	21 f0       	breq	.+8      	; 0x2ca <main+0x74>
 2c2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	c1 f7       	brne	.-16     	; 0x2ba <main+0x64>
			change_value_pot1=0;
 2ca:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <change_value_pot1>
			change_value_pot2=0;
 2ce:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
			
			//comandos_LCD(0b0001);
			if (valor_pot1 != prev_valor_pot1 || valor_pot2 != prev_valor_pot2) {
 2d2:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <valor_pot1>
 2d6:	c6 2e       	mov	r12, r22
 2d8:	d1 2c       	mov	r13, r1
 2da:	2c 15       	cp	r18, r12
 2dc:	3d 05       	cpc	r19, r13
 2de:	31 f4       	brne	.+12     	; 0x2ec <main+0x96>
 2e0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <valor_pot2>
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	e8 16       	cp	r14, r24
 2e8:	f9 06       	cpc	r15, r25
 2ea:	39 f3       	breq	.-50     	; 0x2ba <main+0x64>
				 prev_valor_pot1 = valor_pot1;
				 prev_valor_pot2 = valor_pot2;
 2ec:	e0 90 0f 01 	lds	r14, 0x010F	; 0x80010f <valor_pot2>
 2f0:	f1 2c       	mov	r15, r1
			
				float mpot1=(valor_pot1*5.0)/255;
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 90 03 	call	0x720	; 0x720 <__floatsisf>
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	40 ea       	ldi	r20, 0xA0	; 160
 302:	50 e4       	ldi	r21, 0x40	; 64
 304:	0e 94 1c 04 	call	0x838	; 0x838 <__mulsf3>
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	4f e7       	ldi	r20, 0x7F	; 127
 30e:	53 e4       	ldi	r21, 0x43	; 67
 310:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__divsf3>
 314:	4b 01       	movw	r8, r22
 316:	5c 01       	movw	r10, r24
				float mpot2=(valor_pot2*5.0)/255;
 318:	b7 01       	movw	r22, r14
 31a:	0f 2c       	mov	r0, r15
 31c:	00 0c       	add	r0, r0
 31e:	88 0b       	sbc	r24, r24
 320:	99 0b       	sbc	r25, r25
 322:	0e 94 90 03 	call	0x720	; 0x720 <__floatsisf>
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	40 ea       	ldi	r20, 0xA0	; 160
 32c:	50 e4       	ldi	r21, 0x40	; 64
 32e:	0e 94 1c 04 	call	0x838	; 0x838 <__mulsf3>
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	4f e7       	ldi	r20, 0x7F	; 127
 338:	53 e4       	ldi	r21, 0x43	; 67
 33a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__divsf3>
 33e:	6b 87       	std	Y+11, r22	; 0x0b
 340:	7c 87       	std	Y+12, r23	; 0x0c
 342:	8d 87       	std	Y+13, r24	; 0x0d
 344:	9e 87       	std	Y+14, r25	; 0x0e
			
				uint16_t enterov1=(int)mpot1;
 346:	c5 01       	movw	r24, r10
 348:	b4 01       	movw	r22, r8
 34a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__fixsfsi>
 34e:	76 2e       	mov	r7, r22
 350:	67 2d       	mov	r22, r7
				uint16_t decimalv1=(int)((mpot1-enterov1)*100);
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 8e 03 	call	0x71c	; 0x71c <__floatunsisf>
 35a:	9b 01       	movw	r18, r22
 35c:	ac 01       	movw	r20, r24
 35e:	c5 01       	movw	r24, r10
 360:	b4 01       	movw	r22, r8
 362:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__subsf3>
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	48 ec       	ldi	r20, 0xC8	; 200
 36c:	52 e4       	ldi	r21, 0x42	; 66
 36e:	0e 94 1c 04 	call	0x838	; 0x838 <__mulsf3>
 372:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__fixsfsi>
 376:	66 2e       	mov	r6, r22
 378:	a6 2e       	mov	r10, r22
 37a:	b7 2e       	mov	r11, r23
			
				uint16_t enterov2=(int)mpot2;
 37c:	6b 85       	ldd	r22, Y+11	; 0x0b
 37e:	7c 85       	ldd	r23, Y+12	; 0x0c
 380:	8d 85       	ldd	r24, Y+13	; 0x0d
 382:	9e 85       	ldd	r25, Y+14	; 0x0e
 384:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__fixsfsi>
 388:	86 2e       	mov	r8, r22
 38a:	68 2d       	mov	r22, r8
				uint16_t decimalv2=(int)((mpot2-enterov2)*100);
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 8e 03 	call	0x71c	; 0x71c <__floatunsisf>
 394:	9b 01       	movw	r18, r22
 396:	ac 01       	movw	r20, r24
 398:	6b 85       	ldd	r22, Y+11	; 0x0b
 39a:	7c 85       	ldd	r23, Y+12	; 0x0c
 39c:	8d 85       	ldd	r24, Y+13	; 0x0d
 39e:	9e 85       	ldd	r25, Y+14	; 0x0e
 3a0:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__subsf3>
 3a4:	20 e0       	ldi	r18, 0x00	; 0
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	48 ec       	ldi	r20, 0xC8	; 200
 3aa:	52 e4       	ldi	r21, 0x42	; 66
 3ac:	0e 94 1c 04 	call	0x838	; 0x838 <__mulsf3>
 3b0:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__fixsfsi>
 3b4:	96 2e       	mov	r9, r22
 3b6:	06 2f       	mov	r16, r22
 3b8:	17 2f       	mov	r17, r23
			
				char mensaje1[5];
				LCD_Set_Cursor(0,2);
 3ba:	62 e0       	ldi	r22, 0x02	; 2
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_Set_Cursor>
				mensaje1[0]='0'+enterov1;
 3c2:	80 e3       	ldi	r24, 0x30	; 48
 3c4:	87 0d       	add	r24, r7
 3c6:	8e 83       	std	Y+6, r24	; 0x06
				mensaje1[1]='.';
 3c8:	0f 2e       	mov	r0, r31
 3ca:	fe e2       	ldi	r31, 0x2E	; 46
 3cc:	7f 2e       	mov	r7, r31
 3ce:	f0 2d       	mov	r31, r0
 3d0:	7f 82       	std	Y+7, r7	; 0x07
				mensaje1[2]='0'+(decimalv1/1);
 3d2:	80 e3       	ldi	r24, 0x30	; 48
 3d4:	86 0d       	add	r24, r6
 3d6:	88 87       	std	Y+8, r24	; 0x08
				mensaje1[3]='0'+(decimalv1%10);
 3d8:	95 01       	movw	r18, r10
 3da:	ad ec       	ldi	r26, 0xCD	; 205
 3dc:	bc ec       	ldi	r27, 0xCC	; 204
 3de:	0e 94 89 04 	call	0x912	; 0x912 <__umulhisi3>
 3e2:	96 95       	lsr	r25
 3e4:	87 95       	ror	r24
 3e6:	96 95       	lsr	r25
 3e8:	87 95       	ror	r24
 3ea:	96 95       	lsr	r25
 3ec:	87 95       	ror	r24
 3ee:	9c 01       	movw	r18, r24
 3f0:	22 0f       	add	r18, r18
 3f2:	33 1f       	adc	r19, r19
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	82 0f       	add	r24, r18
 402:	93 1f       	adc	r25, r19
 404:	95 01       	movw	r18, r10
 406:	28 1b       	sub	r18, r24
 408:	39 0b       	sbc	r19, r25
 40a:	c9 01       	movw	r24, r18
 40c:	80 5d       	subi	r24, 0xD0	; 208
 40e:	89 87       	std	Y+9, r24	; 0x09
				mensaje1[4]='V';
 410:	0f 2e       	mov	r0, r31
 412:	f6 e5       	ldi	r31, 0x56	; 86
 414:	bf 2e       	mov	r11, r31
 416:	f0 2d       	mov	r31, r0
 418:	ba 86       	std	Y+10, r11	; 0x0a
				mensaje1[5]='\0';
 41a:	1b 86       	std	Y+11, r1	; 0x0b
				LCD_write_String(mensaje1);
 41c:	ce 01       	movw	r24, r28
 41e:	06 96       	adiw	r24, 0x06	; 6
 420:	0e 94 09 01 	call	0x212	; 0x212 <LCD_write_String>
			
				char mensaje2[5];
				LCD_Set_Cursor(6,2);
 424:	62 e0       	ldi	r22, 0x02	; 2
 426:	86 e0       	ldi	r24, 0x06	; 6
 428:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_Set_Cursor>
				mensaje2[0]='0'+enterov2;
 42c:	80 e3       	ldi	r24, 0x30	; 48
 42e:	88 0d       	add	r24, r8
 430:	89 83       	std	Y+1, r24	; 0x01
				mensaje2[1]='.';
 432:	7a 82       	std	Y+2, r7	; 0x02
				mensaje2[2]='0'+(decimalv2/1);
 434:	80 e3       	ldi	r24, 0x30	; 48
 436:	89 0d       	add	r24, r9
 438:	8b 83       	std	Y+3, r24	; 0x03
				mensaje2[3]='0'+(decimalv2%10);
 43a:	98 01       	movw	r18, r16
 43c:	ad ec       	ldi	r26, 0xCD	; 205
 43e:	bc ec       	ldi	r27, 0xCC	; 204
 440:	0e 94 89 04 	call	0x912	; 0x912 <__umulhisi3>
 444:	96 95       	lsr	r25
 446:	87 95       	ror	r24
 448:	96 95       	lsr	r25
 44a:	87 95       	ror	r24
 44c:	96 95       	lsr	r25
 44e:	87 95       	ror	r24
 450:	9c 01       	movw	r18, r24
 452:	22 0f       	add	r18, r18
 454:	33 1f       	adc	r19, r19
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	82 0f       	add	r24, r18
 464:	93 1f       	adc	r25, r19
 466:	98 01       	movw	r18, r16
 468:	28 1b       	sub	r18, r24
 46a:	39 0b       	sbc	r19, r25
 46c:	c9 01       	movw	r24, r18
 46e:	80 5d       	subi	r24, 0xD0	; 208
 470:	8c 83       	std	Y+4, r24	; 0x04
				mensaje2[4]='V';
 472:	bd 82       	std	Y+5, r11	; 0x05
				mensaje2[5]='\0';
 474:	1e 82       	std	Y+6, r1	; 0x06
				LCD_write_String(mensaje2);
 476:	ce 01       	movw	r24, r28
 478:	01 96       	adiw	r24, 0x01	; 1
 47a:	0e 94 09 01 	call	0x212	; 0x212 <LCD_write_String>
			change_value_pot1=0;
			change_value_pot2=0;
			
			//comandos_LCD(0b0001);
			if (valor_pot1 != prev_valor_pot1 || valor_pot2 != prev_valor_pot2) {
				 prev_valor_pot1 = valor_pot1;
 47e:	96 01       	movw	r18, r12
 480:	1c cf       	rjmp	.-456    	; 0x2ba <main+0x64>

00000482 <__vector_21>:
				LCD_write_String(mensaje2);
			}
		}
    }
}
ISR(ADC_vect){
 482:	1f 92       	push	r1
 484:	0f 92       	push	r0
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	0f 92       	push	r0
 48a:	11 24       	eor	r1, r1
 48c:	8f 93       	push	r24
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
	if (switch_pot==0){
 492:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <switch_pot>
 496:	81 11       	cpse	r24, r1
 498:	10 c0       	rjmp	.+32     	; 0x4ba <__vector_21+0x38>
		ADMUX=0;
 49a:	ec e7       	ldi	r30, 0x7C	; 124
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	10 82       	st	Z, r1
		ADMUX|=((1<<MUX1)|(1<<MUX2));
 4a0:	80 81       	ld	r24, Z
 4a2:	86 60       	ori	r24, 0x06	; 6
 4a4:	80 83       	st	Z, r24
		valor_pot1=ADCH;
 4a6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 4aa:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <valor_pot1>
		switch_pot=1;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <switch_pot>
		change_value_pot1=1;
 4b4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <change_value_pot1>
 4b8:	0f c0       	rjmp	.+30     	; 0x4d8 <__vector_21+0x56>
		}else{
		ADMUX=0;
 4ba:	ec e7       	ldi	r30, 0x7C	; 124
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	10 82       	st	Z, r1
		ADMUX|=((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 4c0:	80 81       	ld	r24, Z
 4c2:	87 60       	ori	r24, 0x07	; 7
 4c4:	80 83       	st	Z, r24
		valor_pot2=ADCH;
 4c6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 4ca:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <valor_pot2>
		switch_pot=0;
 4ce:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <switch_pot>
		change_value_pot2=1;
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	}
	ADCSRA|=(1<<ADIF);
 4d8:	ea e7       	ldi	r30, 0x7A	; 122
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	80 61       	ori	r24, 0x10	; 16
 4e0:	80 83       	st	Z, r24
}
 4e2:	ff 91       	pop	r31
 4e4:	ef 91       	pop	r30
 4e6:	8f 91       	pop	r24
 4e8:	0f 90       	pop	r0
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	0f 90       	pop	r0
 4ee:	1f 90       	pop	r1
 4f0:	18 95       	reti

000004f2 <__subsf3>:
 4f2:	50 58       	subi	r21, 0x80	; 128

000004f4 <__addsf3>:
 4f4:	bb 27       	eor	r27, r27
 4f6:	aa 27       	eor	r26, r26
 4f8:	0e 94 91 02 	call	0x522	; 0x522 <__addsf3x>
 4fc:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__fp_round>
 500:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__fp_pscA>
 504:	38 f0       	brcs	.+14     	; 0x514 <__addsf3+0x20>
 506:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__fp_pscB>
 50a:	20 f0       	brcs	.+8      	; 0x514 <__addsf3+0x20>
 50c:	39 f4       	brne	.+14     	; 0x51c <__addsf3+0x28>
 50e:	9f 3f       	cpi	r25, 0xFF	; 255
 510:	19 f4       	brne	.+6      	; 0x518 <__addsf3+0x24>
 512:	26 f4       	brtc	.+8      	; 0x51c <__addsf3+0x28>
 514:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <__fp_nan>
 518:	0e f4       	brtc	.+2      	; 0x51c <__addsf3+0x28>
 51a:	e0 95       	com	r30
 51c:	e7 fb       	bst	r30, 7
 51e:	0c 94 cb 03 	jmp	0x796	; 0x796 <__fp_inf>

00000522 <__addsf3x>:
 522:	e9 2f       	mov	r30, r25
 524:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__fp_split3>
 528:	58 f3       	brcs	.-42     	; 0x500 <__addsf3+0xc>
 52a:	ba 17       	cp	r27, r26
 52c:	62 07       	cpc	r22, r18
 52e:	73 07       	cpc	r23, r19
 530:	84 07       	cpc	r24, r20
 532:	95 07       	cpc	r25, r21
 534:	20 f0       	brcs	.+8      	; 0x53e <__addsf3x+0x1c>
 536:	79 f4       	brne	.+30     	; 0x556 <__addsf3x+0x34>
 538:	a6 f5       	brtc	.+104    	; 0x5a2 <__addsf3x+0x80>
 53a:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_zero>
 53e:	0e f4       	brtc	.+2      	; 0x542 <__addsf3x+0x20>
 540:	e0 95       	com	r30
 542:	0b 2e       	mov	r0, r27
 544:	ba 2f       	mov	r27, r26
 546:	a0 2d       	mov	r26, r0
 548:	0b 01       	movw	r0, r22
 54a:	b9 01       	movw	r22, r18
 54c:	90 01       	movw	r18, r0
 54e:	0c 01       	movw	r0, r24
 550:	ca 01       	movw	r24, r20
 552:	a0 01       	movw	r20, r0
 554:	11 24       	eor	r1, r1
 556:	ff 27       	eor	r31, r31
 558:	59 1b       	sub	r21, r25
 55a:	99 f0       	breq	.+38     	; 0x582 <__addsf3x+0x60>
 55c:	59 3f       	cpi	r21, 0xF9	; 249
 55e:	50 f4       	brcc	.+20     	; 0x574 <__addsf3x+0x52>
 560:	50 3e       	cpi	r21, 0xE0	; 224
 562:	68 f1       	brcs	.+90     	; 0x5be <__addsf3x+0x9c>
 564:	1a 16       	cp	r1, r26
 566:	f0 40       	sbci	r31, 0x00	; 0
 568:	a2 2f       	mov	r26, r18
 56a:	23 2f       	mov	r18, r19
 56c:	34 2f       	mov	r19, r20
 56e:	44 27       	eor	r20, r20
 570:	58 5f       	subi	r21, 0xF8	; 248
 572:	f3 cf       	rjmp	.-26     	; 0x55a <__addsf3x+0x38>
 574:	46 95       	lsr	r20
 576:	37 95       	ror	r19
 578:	27 95       	ror	r18
 57a:	a7 95       	ror	r26
 57c:	f0 40       	sbci	r31, 0x00	; 0
 57e:	53 95       	inc	r21
 580:	c9 f7       	brne	.-14     	; 0x574 <__addsf3x+0x52>
 582:	7e f4       	brtc	.+30     	; 0x5a2 <__addsf3x+0x80>
 584:	1f 16       	cp	r1, r31
 586:	ba 0b       	sbc	r27, r26
 588:	62 0b       	sbc	r22, r18
 58a:	73 0b       	sbc	r23, r19
 58c:	84 0b       	sbc	r24, r20
 58e:	ba f0       	brmi	.+46     	; 0x5be <__addsf3x+0x9c>
 590:	91 50       	subi	r25, 0x01	; 1
 592:	a1 f0       	breq	.+40     	; 0x5bc <__addsf3x+0x9a>
 594:	ff 0f       	add	r31, r31
 596:	bb 1f       	adc	r27, r27
 598:	66 1f       	adc	r22, r22
 59a:	77 1f       	adc	r23, r23
 59c:	88 1f       	adc	r24, r24
 59e:	c2 f7       	brpl	.-16     	; 0x590 <__addsf3x+0x6e>
 5a0:	0e c0       	rjmp	.+28     	; 0x5be <__addsf3x+0x9c>
 5a2:	ba 0f       	add	r27, r26
 5a4:	62 1f       	adc	r22, r18
 5a6:	73 1f       	adc	r23, r19
 5a8:	84 1f       	adc	r24, r20
 5aa:	48 f4       	brcc	.+18     	; 0x5be <__addsf3x+0x9c>
 5ac:	87 95       	ror	r24
 5ae:	77 95       	ror	r23
 5b0:	67 95       	ror	r22
 5b2:	b7 95       	ror	r27
 5b4:	f7 95       	ror	r31
 5b6:	9e 3f       	cpi	r25, 0xFE	; 254
 5b8:	08 f0       	brcs	.+2      	; 0x5bc <__addsf3x+0x9a>
 5ba:	b0 cf       	rjmp	.-160    	; 0x51c <__addsf3+0x28>
 5bc:	93 95       	inc	r25
 5be:	88 0f       	add	r24, r24
 5c0:	08 f0       	brcs	.+2      	; 0x5c4 <__addsf3x+0xa2>
 5c2:	99 27       	eor	r25, r25
 5c4:	ee 0f       	add	r30, r30
 5c6:	97 95       	ror	r25
 5c8:	87 95       	ror	r24
 5ca:	08 95       	ret

000005cc <__divsf3>:
 5cc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__divsf3x>
 5d0:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__fp_round>
 5d4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__fp_pscB>
 5d8:	58 f0       	brcs	.+22     	; 0x5f0 <__divsf3+0x24>
 5da:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__fp_pscA>
 5de:	40 f0       	brcs	.+16     	; 0x5f0 <__divsf3+0x24>
 5e0:	29 f4       	brne	.+10     	; 0x5ec <__divsf3+0x20>
 5e2:	5f 3f       	cpi	r21, 0xFF	; 255
 5e4:	29 f0       	breq	.+10     	; 0x5f0 <__divsf3+0x24>
 5e6:	0c 94 cb 03 	jmp	0x796	; 0x796 <__fp_inf>
 5ea:	51 11       	cpse	r21, r1
 5ec:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_szero>
 5f0:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <__fp_nan>

000005f4 <__divsf3x>:
 5f4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__fp_split3>
 5f8:	68 f3       	brcs	.-38     	; 0x5d4 <__divsf3+0x8>

000005fa <__divsf3_pse>:
 5fa:	99 23       	and	r25, r25
 5fc:	b1 f3       	breq	.-20     	; 0x5ea <__divsf3+0x1e>
 5fe:	55 23       	and	r21, r21
 600:	91 f3       	breq	.-28     	; 0x5e6 <__divsf3+0x1a>
 602:	95 1b       	sub	r25, r21
 604:	55 0b       	sbc	r21, r21
 606:	bb 27       	eor	r27, r27
 608:	aa 27       	eor	r26, r26
 60a:	62 17       	cp	r22, r18
 60c:	73 07       	cpc	r23, r19
 60e:	84 07       	cpc	r24, r20
 610:	38 f0       	brcs	.+14     	; 0x620 <__divsf3_pse+0x26>
 612:	9f 5f       	subi	r25, 0xFF	; 255
 614:	5f 4f       	sbci	r21, 0xFF	; 255
 616:	22 0f       	add	r18, r18
 618:	33 1f       	adc	r19, r19
 61a:	44 1f       	adc	r20, r20
 61c:	aa 1f       	adc	r26, r26
 61e:	a9 f3       	breq	.-22     	; 0x60a <__divsf3_pse+0x10>
 620:	35 d0       	rcall	.+106    	; 0x68c <__divsf3_pse+0x92>
 622:	0e 2e       	mov	r0, r30
 624:	3a f0       	brmi	.+14     	; 0x634 <__divsf3_pse+0x3a>
 626:	e0 e8       	ldi	r30, 0x80	; 128
 628:	32 d0       	rcall	.+100    	; 0x68e <__divsf3_pse+0x94>
 62a:	91 50       	subi	r25, 0x01	; 1
 62c:	50 40       	sbci	r21, 0x00	; 0
 62e:	e6 95       	lsr	r30
 630:	00 1c       	adc	r0, r0
 632:	ca f7       	brpl	.-14     	; 0x626 <__divsf3_pse+0x2c>
 634:	2b d0       	rcall	.+86     	; 0x68c <__divsf3_pse+0x92>
 636:	fe 2f       	mov	r31, r30
 638:	29 d0       	rcall	.+82     	; 0x68c <__divsf3_pse+0x92>
 63a:	66 0f       	add	r22, r22
 63c:	77 1f       	adc	r23, r23
 63e:	88 1f       	adc	r24, r24
 640:	bb 1f       	adc	r27, r27
 642:	26 17       	cp	r18, r22
 644:	37 07       	cpc	r19, r23
 646:	48 07       	cpc	r20, r24
 648:	ab 07       	cpc	r26, r27
 64a:	b0 e8       	ldi	r27, 0x80	; 128
 64c:	09 f0       	breq	.+2      	; 0x650 <__divsf3_pse+0x56>
 64e:	bb 0b       	sbc	r27, r27
 650:	80 2d       	mov	r24, r0
 652:	bf 01       	movw	r22, r30
 654:	ff 27       	eor	r31, r31
 656:	93 58       	subi	r25, 0x83	; 131
 658:	5f 4f       	sbci	r21, 0xFF	; 255
 65a:	3a f0       	brmi	.+14     	; 0x66a <__divsf3_pse+0x70>
 65c:	9e 3f       	cpi	r25, 0xFE	; 254
 65e:	51 05       	cpc	r21, r1
 660:	78 f0       	brcs	.+30     	; 0x680 <__divsf3_pse+0x86>
 662:	0c 94 cb 03 	jmp	0x796	; 0x796 <__fp_inf>
 666:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_szero>
 66a:	5f 3f       	cpi	r21, 0xFF	; 255
 66c:	e4 f3       	brlt	.-8      	; 0x666 <__divsf3_pse+0x6c>
 66e:	98 3e       	cpi	r25, 0xE8	; 232
 670:	d4 f3       	brlt	.-12     	; 0x666 <__divsf3_pse+0x6c>
 672:	86 95       	lsr	r24
 674:	77 95       	ror	r23
 676:	67 95       	ror	r22
 678:	b7 95       	ror	r27
 67a:	f7 95       	ror	r31
 67c:	9f 5f       	subi	r25, 0xFF	; 255
 67e:	c9 f7       	brne	.-14     	; 0x672 <__divsf3_pse+0x78>
 680:	88 0f       	add	r24, r24
 682:	91 1d       	adc	r25, r1
 684:	96 95       	lsr	r25
 686:	87 95       	ror	r24
 688:	97 f9       	bld	r25, 7
 68a:	08 95       	ret
 68c:	e1 e0       	ldi	r30, 0x01	; 1
 68e:	66 0f       	add	r22, r22
 690:	77 1f       	adc	r23, r23
 692:	88 1f       	adc	r24, r24
 694:	bb 1f       	adc	r27, r27
 696:	62 17       	cp	r22, r18
 698:	73 07       	cpc	r23, r19
 69a:	84 07       	cpc	r24, r20
 69c:	ba 07       	cpc	r27, r26
 69e:	20 f0       	brcs	.+8      	; 0x6a8 <__divsf3_pse+0xae>
 6a0:	62 1b       	sub	r22, r18
 6a2:	73 0b       	sbc	r23, r19
 6a4:	84 0b       	sbc	r24, r20
 6a6:	ba 0b       	sbc	r27, r26
 6a8:	ee 1f       	adc	r30, r30
 6aa:	88 f7       	brcc	.-30     	; 0x68e <__divsf3_pse+0x94>
 6ac:	e0 95       	com	r30
 6ae:	08 95       	ret

000006b0 <__fixsfsi>:
 6b0:	0e 94 5f 03 	call	0x6be	; 0x6be <__fixunssfsi>
 6b4:	68 94       	set
 6b6:	b1 11       	cpse	r27, r1
 6b8:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_szero>
 6bc:	08 95       	ret

000006be <__fixunssfsi>:
 6be:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fp_splitA>
 6c2:	88 f0       	brcs	.+34     	; 0x6e6 <__fixunssfsi+0x28>
 6c4:	9f 57       	subi	r25, 0x7F	; 127
 6c6:	98 f0       	brcs	.+38     	; 0x6ee <__fixunssfsi+0x30>
 6c8:	b9 2f       	mov	r27, r25
 6ca:	99 27       	eor	r25, r25
 6cc:	b7 51       	subi	r27, 0x17	; 23
 6ce:	b0 f0       	brcs	.+44     	; 0x6fc <__fixunssfsi+0x3e>
 6d0:	e1 f0       	breq	.+56     	; 0x70a <__fixunssfsi+0x4c>
 6d2:	66 0f       	add	r22, r22
 6d4:	77 1f       	adc	r23, r23
 6d6:	88 1f       	adc	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	1a f0       	brmi	.+6      	; 0x6e2 <__fixunssfsi+0x24>
 6dc:	ba 95       	dec	r27
 6de:	c9 f7       	brne	.-14     	; 0x6d2 <__fixunssfsi+0x14>
 6e0:	14 c0       	rjmp	.+40     	; 0x70a <__fixunssfsi+0x4c>
 6e2:	b1 30       	cpi	r27, 0x01	; 1
 6e4:	91 f0       	breq	.+36     	; 0x70a <__fixunssfsi+0x4c>
 6e6:	0e 94 15 04 	call	0x82a	; 0x82a <__fp_zero>
 6ea:	b1 e0       	ldi	r27, 0x01	; 1
 6ec:	08 95       	ret
 6ee:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_zero>
 6f2:	67 2f       	mov	r22, r23
 6f4:	78 2f       	mov	r23, r24
 6f6:	88 27       	eor	r24, r24
 6f8:	b8 5f       	subi	r27, 0xF8	; 248
 6fa:	39 f0       	breq	.+14     	; 0x70a <__fixunssfsi+0x4c>
 6fc:	b9 3f       	cpi	r27, 0xF9	; 249
 6fe:	cc f3       	brlt	.-14     	; 0x6f2 <__fixunssfsi+0x34>
 700:	86 95       	lsr	r24
 702:	77 95       	ror	r23
 704:	67 95       	ror	r22
 706:	b3 95       	inc	r27
 708:	d9 f7       	brne	.-10     	; 0x700 <__fixunssfsi+0x42>
 70a:	3e f4       	brtc	.+14     	; 0x71a <__fixunssfsi+0x5c>
 70c:	90 95       	com	r25
 70e:	80 95       	com	r24
 710:	70 95       	com	r23
 712:	61 95       	neg	r22
 714:	7f 4f       	sbci	r23, 0xFF	; 255
 716:	8f 4f       	sbci	r24, 0xFF	; 255
 718:	9f 4f       	sbci	r25, 0xFF	; 255
 71a:	08 95       	ret

0000071c <__floatunsisf>:
 71c:	e8 94       	clt
 71e:	09 c0       	rjmp	.+18     	; 0x732 <__floatsisf+0x12>

00000720 <__floatsisf>:
 720:	97 fb       	bst	r25, 7
 722:	3e f4       	brtc	.+14     	; 0x732 <__floatsisf+0x12>
 724:	90 95       	com	r25
 726:	80 95       	com	r24
 728:	70 95       	com	r23
 72a:	61 95       	neg	r22
 72c:	7f 4f       	sbci	r23, 0xFF	; 255
 72e:	8f 4f       	sbci	r24, 0xFF	; 255
 730:	9f 4f       	sbci	r25, 0xFF	; 255
 732:	99 23       	and	r25, r25
 734:	a9 f0       	breq	.+42     	; 0x760 <__floatsisf+0x40>
 736:	f9 2f       	mov	r31, r25
 738:	96 e9       	ldi	r25, 0x96	; 150
 73a:	bb 27       	eor	r27, r27
 73c:	93 95       	inc	r25
 73e:	f6 95       	lsr	r31
 740:	87 95       	ror	r24
 742:	77 95       	ror	r23
 744:	67 95       	ror	r22
 746:	b7 95       	ror	r27
 748:	f1 11       	cpse	r31, r1
 74a:	f8 cf       	rjmp	.-16     	; 0x73c <__floatsisf+0x1c>
 74c:	fa f4       	brpl	.+62     	; 0x78c <__floatsisf+0x6c>
 74e:	bb 0f       	add	r27, r27
 750:	11 f4       	brne	.+4      	; 0x756 <__floatsisf+0x36>
 752:	60 ff       	sbrs	r22, 0
 754:	1b c0       	rjmp	.+54     	; 0x78c <__floatsisf+0x6c>
 756:	6f 5f       	subi	r22, 0xFF	; 255
 758:	7f 4f       	sbci	r23, 0xFF	; 255
 75a:	8f 4f       	sbci	r24, 0xFF	; 255
 75c:	9f 4f       	sbci	r25, 0xFF	; 255
 75e:	16 c0       	rjmp	.+44     	; 0x78c <__floatsisf+0x6c>
 760:	88 23       	and	r24, r24
 762:	11 f0       	breq	.+4      	; 0x768 <__floatsisf+0x48>
 764:	96 e9       	ldi	r25, 0x96	; 150
 766:	11 c0       	rjmp	.+34     	; 0x78a <__floatsisf+0x6a>
 768:	77 23       	and	r23, r23
 76a:	21 f0       	breq	.+8      	; 0x774 <__floatsisf+0x54>
 76c:	9e e8       	ldi	r25, 0x8E	; 142
 76e:	87 2f       	mov	r24, r23
 770:	76 2f       	mov	r23, r22
 772:	05 c0       	rjmp	.+10     	; 0x77e <__floatsisf+0x5e>
 774:	66 23       	and	r22, r22
 776:	71 f0       	breq	.+28     	; 0x794 <__floatsisf+0x74>
 778:	96 e8       	ldi	r25, 0x86	; 134
 77a:	86 2f       	mov	r24, r22
 77c:	70 e0       	ldi	r23, 0x00	; 0
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	2a f0       	brmi	.+10     	; 0x78c <__floatsisf+0x6c>
 782:	9a 95       	dec	r25
 784:	66 0f       	add	r22, r22
 786:	77 1f       	adc	r23, r23
 788:	88 1f       	adc	r24, r24
 78a:	da f7       	brpl	.-10     	; 0x782 <__floatsisf+0x62>
 78c:	88 0f       	add	r24, r24
 78e:	96 95       	lsr	r25
 790:	87 95       	ror	r24
 792:	97 f9       	bld	r25, 7
 794:	08 95       	ret

00000796 <__fp_inf>:
 796:	97 f9       	bld	r25, 7
 798:	9f 67       	ori	r25, 0x7F	; 127
 79a:	80 e8       	ldi	r24, 0x80	; 128
 79c:	70 e0       	ldi	r23, 0x00	; 0
 79e:	60 e0       	ldi	r22, 0x00	; 0
 7a0:	08 95       	ret

000007a2 <__fp_nan>:
 7a2:	9f ef       	ldi	r25, 0xFF	; 255
 7a4:	80 ec       	ldi	r24, 0xC0	; 192
 7a6:	08 95       	ret

000007a8 <__fp_pscA>:
 7a8:	00 24       	eor	r0, r0
 7aa:	0a 94       	dec	r0
 7ac:	16 16       	cp	r1, r22
 7ae:	17 06       	cpc	r1, r23
 7b0:	18 06       	cpc	r1, r24
 7b2:	09 06       	cpc	r0, r25
 7b4:	08 95       	ret

000007b6 <__fp_pscB>:
 7b6:	00 24       	eor	r0, r0
 7b8:	0a 94       	dec	r0
 7ba:	12 16       	cp	r1, r18
 7bc:	13 06       	cpc	r1, r19
 7be:	14 06       	cpc	r1, r20
 7c0:	05 06       	cpc	r0, r21
 7c2:	08 95       	ret

000007c4 <__fp_round>:
 7c4:	09 2e       	mov	r0, r25
 7c6:	03 94       	inc	r0
 7c8:	00 0c       	add	r0, r0
 7ca:	11 f4       	brne	.+4      	; 0x7d0 <__fp_round+0xc>
 7cc:	88 23       	and	r24, r24
 7ce:	52 f0       	brmi	.+20     	; 0x7e4 <__fp_round+0x20>
 7d0:	bb 0f       	add	r27, r27
 7d2:	40 f4       	brcc	.+16     	; 0x7e4 <__fp_round+0x20>
 7d4:	bf 2b       	or	r27, r31
 7d6:	11 f4       	brne	.+4      	; 0x7dc <__fp_round+0x18>
 7d8:	60 ff       	sbrs	r22, 0
 7da:	04 c0       	rjmp	.+8      	; 0x7e4 <__fp_round+0x20>
 7dc:	6f 5f       	subi	r22, 0xFF	; 255
 7de:	7f 4f       	sbci	r23, 0xFF	; 255
 7e0:	8f 4f       	sbci	r24, 0xFF	; 255
 7e2:	9f 4f       	sbci	r25, 0xFF	; 255
 7e4:	08 95       	ret

000007e6 <__fp_split3>:
 7e6:	57 fd       	sbrc	r21, 7
 7e8:	90 58       	subi	r25, 0x80	; 128
 7ea:	44 0f       	add	r20, r20
 7ec:	55 1f       	adc	r21, r21
 7ee:	59 f0       	breq	.+22     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7f0:	5f 3f       	cpi	r21, 0xFF	; 255
 7f2:	71 f0       	breq	.+28     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7f4:	47 95       	ror	r20

000007f6 <__fp_splitA>:
 7f6:	88 0f       	add	r24, r24
 7f8:	97 fb       	bst	r25, 7
 7fa:	99 1f       	adc	r25, r25
 7fc:	61 f0       	breq	.+24     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7fe:	9f 3f       	cpi	r25, 0xFF	; 255
 800:	79 f0       	breq	.+30     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 802:	87 95       	ror	r24
 804:	08 95       	ret
 806:	12 16       	cp	r1, r18
 808:	13 06       	cpc	r1, r19
 80a:	14 06       	cpc	r1, r20
 80c:	55 1f       	adc	r21, r21
 80e:	f2 cf       	rjmp	.-28     	; 0x7f4 <__fp_split3+0xe>
 810:	46 95       	lsr	r20
 812:	f1 df       	rcall	.-30     	; 0x7f6 <__fp_splitA>
 814:	08 c0       	rjmp	.+16     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 816:	16 16       	cp	r1, r22
 818:	17 06       	cpc	r1, r23
 81a:	18 06       	cpc	r1, r24
 81c:	99 1f       	adc	r25, r25
 81e:	f1 cf       	rjmp	.-30     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 820:	86 95       	lsr	r24
 822:	71 05       	cpc	r23, r1
 824:	61 05       	cpc	r22, r1
 826:	08 94       	sec
 828:	08 95       	ret

0000082a <__fp_zero>:
 82a:	e8 94       	clt

0000082c <__fp_szero>:
 82c:	bb 27       	eor	r27, r27
 82e:	66 27       	eor	r22, r22
 830:	77 27       	eor	r23, r23
 832:	cb 01       	movw	r24, r22
 834:	97 f9       	bld	r25, 7
 836:	08 95       	ret

00000838 <__mulsf3>:
 838:	0e 94 2f 04 	call	0x85e	; 0x85e <__mulsf3x>
 83c:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__fp_round>
 840:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__fp_pscA>
 844:	38 f0       	brcs	.+14     	; 0x854 <__mulsf3+0x1c>
 846:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__fp_pscB>
 84a:	20 f0       	brcs	.+8      	; 0x854 <__mulsf3+0x1c>
 84c:	95 23       	and	r25, r21
 84e:	11 f0       	breq	.+4      	; 0x854 <__mulsf3+0x1c>
 850:	0c 94 cb 03 	jmp	0x796	; 0x796 <__fp_inf>
 854:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <__fp_nan>
 858:	11 24       	eor	r1, r1
 85a:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_szero>

0000085e <__mulsf3x>:
 85e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__fp_split3>
 862:	70 f3       	brcs	.-36     	; 0x840 <__mulsf3+0x8>

00000864 <__mulsf3_pse>:
 864:	95 9f       	mul	r25, r21
 866:	c1 f3       	breq	.-16     	; 0x858 <__mulsf3+0x20>
 868:	95 0f       	add	r25, r21
 86a:	50 e0       	ldi	r21, 0x00	; 0
 86c:	55 1f       	adc	r21, r21
 86e:	62 9f       	mul	r22, r18
 870:	f0 01       	movw	r30, r0
 872:	72 9f       	mul	r23, r18
 874:	bb 27       	eor	r27, r27
 876:	f0 0d       	add	r31, r0
 878:	b1 1d       	adc	r27, r1
 87a:	63 9f       	mul	r22, r19
 87c:	aa 27       	eor	r26, r26
 87e:	f0 0d       	add	r31, r0
 880:	b1 1d       	adc	r27, r1
 882:	aa 1f       	adc	r26, r26
 884:	64 9f       	mul	r22, r20
 886:	66 27       	eor	r22, r22
 888:	b0 0d       	add	r27, r0
 88a:	a1 1d       	adc	r26, r1
 88c:	66 1f       	adc	r22, r22
 88e:	82 9f       	mul	r24, r18
 890:	22 27       	eor	r18, r18
 892:	b0 0d       	add	r27, r0
 894:	a1 1d       	adc	r26, r1
 896:	62 1f       	adc	r22, r18
 898:	73 9f       	mul	r23, r19
 89a:	b0 0d       	add	r27, r0
 89c:	a1 1d       	adc	r26, r1
 89e:	62 1f       	adc	r22, r18
 8a0:	83 9f       	mul	r24, r19
 8a2:	a0 0d       	add	r26, r0
 8a4:	61 1d       	adc	r22, r1
 8a6:	22 1f       	adc	r18, r18
 8a8:	74 9f       	mul	r23, r20
 8aa:	33 27       	eor	r19, r19
 8ac:	a0 0d       	add	r26, r0
 8ae:	61 1d       	adc	r22, r1
 8b0:	23 1f       	adc	r18, r19
 8b2:	84 9f       	mul	r24, r20
 8b4:	60 0d       	add	r22, r0
 8b6:	21 1d       	adc	r18, r1
 8b8:	82 2f       	mov	r24, r18
 8ba:	76 2f       	mov	r23, r22
 8bc:	6a 2f       	mov	r22, r26
 8be:	11 24       	eor	r1, r1
 8c0:	9f 57       	subi	r25, 0x7F	; 127
 8c2:	50 40       	sbci	r21, 0x00	; 0
 8c4:	9a f0       	brmi	.+38     	; 0x8ec <__mulsf3_pse+0x88>
 8c6:	f1 f0       	breq	.+60     	; 0x904 <__stack+0x5>
 8c8:	88 23       	and	r24, r24
 8ca:	4a f0       	brmi	.+18     	; 0x8de <__mulsf3_pse+0x7a>
 8cc:	ee 0f       	add	r30, r30
 8ce:	ff 1f       	adc	r31, r31
 8d0:	bb 1f       	adc	r27, r27
 8d2:	66 1f       	adc	r22, r22
 8d4:	77 1f       	adc	r23, r23
 8d6:	88 1f       	adc	r24, r24
 8d8:	91 50       	subi	r25, 0x01	; 1
 8da:	50 40       	sbci	r21, 0x00	; 0
 8dc:	a9 f7       	brne	.-22     	; 0x8c8 <__mulsf3_pse+0x64>
 8de:	9e 3f       	cpi	r25, 0xFE	; 254
 8e0:	51 05       	cpc	r21, r1
 8e2:	80 f0       	brcs	.+32     	; 0x904 <__stack+0x5>
 8e4:	0c 94 cb 03 	jmp	0x796	; 0x796 <__fp_inf>
 8e8:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_szero>
 8ec:	5f 3f       	cpi	r21, 0xFF	; 255
 8ee:	e4 f3       	brlt	.-8      	; 0x8e8 <__mulsf3_pse+0x84>
 8f0:	98 3e       	cpi	r25, 0xE8	; 232
 8f2:	d4 f3       	brlt	.-12     	; 0x8e8 <__mulsf3_pse+0x84>
 8f4:	86 95       	lsr	r24
 8f6:	77 95       	ror	r23
 8f8:	67 95       	ror	r22
 8fa:	b7 95       	ror	r27
 8fc:	f7 95       	ror	r31
 8fe:	e7 95       	ror	r30
 900:	9f 5f       	subi	r25, 0xFF	; 255
 902:	c1 f7       	brne	.-16     	; 0x8f4 <__mulsf3_pse+0x90>
 904:	fe 2b       	or	r31, r30
 906:	88 0f       	add	r24, r24
 908:	91 1d       	adc	r25, r1
 90a:	96 95       	lsr	r25
 90c:	87 95       	ror	r24
 90e:	97 f9       	bld	r25, 7
 910:	08 95       	ret

00000912 <__umulhisi3>:
 912:	a2 9f       	mul	r26, r18
 914:	b0 01       	movw	r22, r0
 916:	b3 9f       	mul	r27, r19
 918:	c0 01       	movw	r24, r0
 91a:	a3 9f       	mul	r26, r19
 91c:	70 0d       	add	r23, r0
 91e:	81 1d       	adc	r24, r1
 920:	11 24       	eor	r1, r1
 922:	91 1d       	adc	r25, r1
 924:	b2 9f       	mul	r27, r18
 926:	70 0d       	add	r23, r0
 928:	81 1d       	adc	r24, r1
 92a:	11 24       	eor	r1, r1
 92c:	91 1d       	adc	r25, r1
 92e:	08 95       	ret

00000930 <_exit>:
 930:	f8 94       	cli

00000932 <__stop_program>:
 932:	ff cf       	rjmp	.-2      	; 0x932 <__stop_program>
