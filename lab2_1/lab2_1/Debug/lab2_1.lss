
lab2_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000932  000009c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000932  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010c  0080010c  000009d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d9b  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000860  00000000  00000000  0000186f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b4  00000000  00000000  000020cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00002784  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c7  00000000  00000000  00002890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000052f  00000000  00000000  00002d57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00003286  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 2b 01 	jmp	0x256	; 0x256 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <main>
  9e:	0c 94 97 04 	jmp	0x92e	; 0x92e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initadc>:
 * Created: 2/5/2025 11:45:01 PM
 *  Author: njfg0
 */ 
#include "adc.h"
void initadc(void){
ADMUX=0;
  a6:	ac e7       	ldi	r26, 0x7C	; 124
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	1c 92       	st	X, r1
ADCSRA=0;
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	10 82       	st	Z, r1

ADMUX|=(1<<REFS0);
  b2:	8c 91       	ld	r24, X
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	8c 93       	st	X, r24
ADMUX|=(1<<ADLAR);
  b8:	8c 91       	ld	r24, X
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	8c 93       	st	X, r24
ADCSRA=0;
  be:	10 82       	st	Z, r1
ADCSRA|=(1<<ADEN)|(1<<ADIE);
  c0:	80 81       	ld	r24, Z
  c2:	88 68       	ori	r24, 0x88	; 136
  c4:	80 83       	st	Z, r24
ADCSRA|=(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  c6:	80 81       	ld	r24, Z
  c8:	87 60       	ori	r24, 0x07	; 7
  ca:	80 83       	st	Z, r24

ADCSRB=0;
  cc:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  d0:	08 95       	ret

000000d2 <port_disp>:
	//E=0;
	PORTD&=~(1<<PORTD3);
}

void port_disp(char a){
	if (a&1)
  d2:	80 ff       	sbrs	r24, 0
  d4:	04 c0       	rjmp	.+8      	; 0xde <port_disp+0xc>
	PORTD|=(1<<PORTD4);
  d6:	9b b1       	in	r25, 0x0b	; 11
  d8:	90 61       	ori	r25, 0x10	; 16
  da:	9b b9       	out	0x0b, r25	; 11
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <port_disp+0x12>
	else
	PORTD&=~(1<<PORTD4);
  de:	9b b1       	in	r25, 0x0b	; 11
  e0:	9f 7e       	andi	r25, 0xEF	; 239
  e2:	9b b9       	out	0x0b, r25	; 11
	
	if (a&2)
  e4:	81 ff       	sbrs	r24, 1
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <port_disp+0x1e>
	PORTD|=(1<<PORTD5);
  e8:	9b b1       	in	r25, 0x0b	; 11
  ea:	90 62       	ori	r25, 0x20	; 32
  ec:	9b b9       	out	0x0b, r25	; 11
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <port_disp+0x24>
	else
	PORTD&=~(1<<PORTD5);
  f0:	9b b1       	in	r25, 0x0b	; 11
  f2:	9f 7d       	andi	r25, 0xDF	; 223
  f4:	9b b9       	out	0x0b, r25	; 11
	
	if (a&4)
  f6:	82 ff       	sbrs	r24, 2
  f8:	04 c0       	rjmp	.+8      	; 0x102 <port_disp+0x30>
	PORTD|=(1<<PORTD6);
  fa:	9b b1       	in	r25, 0x0b	; 11
  fc:	90 64       	ori	r25, 0x40	; 64
  fe:	9b b9       	out	0x0b, r25	; 11
 100:	03 c0       	rjmp	.+6      	; 0x108 <port_disp+0x36>
	else
	PORTD&=~(1<<PORTD6);
 102:	9b b1       	in	r25, 0x0b	; 11
 104:	9f 7b       	andi	r25, 0xBF	; 191
 106:	9b b9       	out	0x0b, r25	; 11
	
	if (a&8)
 108:	83 ff       	sbrs	r24, 3
 10a:	04 c0       	rjmp	.+8      	; 0x114 <port_disp+0x42>
	PORTD|=(1<<PORTD7);
 10c:	9b b1       	in	r25, 0x0b	; 11
 10e:	90 68       	ori	r25, 0x80	; 128
 110:	9b b9       	out	0x0b, r25	; 11
 112:	03 c0       	rjmp	.+6      	; 0x11a <port_disp+0x48>
	else
	PORTD&=~(1<<PORTD7);
 114:	9b b1       	in	r25, 0x0b	; 11
 116:	9f 77       	andi	r25, 0x7F	; 127
 118:	9b b9       	out	0x0b, r25	; 11
	
	if (a&16)
 11a:	84 ff       	sbrs	r24, 4
 11c:	04 c0       	rjmp	.+8      	; 0x126 <port_disp+0x54>
	PORTB|=(1<<PORTB0);
 11e:	95 b1       	in	r25, 0x05	; 5
 120:	91 60       	ori	r25, 0x01	; 1
 122:	95 b9       	out	0x05, r25	; 5
 124:	03 c0       	rjmp	.+6      	; 0x12c <port_disp+0x5a>
	else
	PORTB&=~(1<<PORTB0);
 126:	95 b1       	in	r25, 0x05	; 5
 128:	9e 7f       	andi	r25, 0xFE	; 254
 12a:	95 b9       	out	0x05, r25	; 5
	
	if (a&32)
 12c:	85 ff       	sbrs	r24, 5
 12e:	04 c0       	rjmp	.+8      	; 0x138 <port_disp+0x66>
	PORTB|=(1<<PORTB1);
 130:	95 b1       	in	r25, 0x05	; 5
 132:	92 60       	ori	r25, 0x02	; 2
 134:	95 b9       	out	0x05, r25	; 5
 136:	03 c0       	rjmp	.+6      	; 0x13e <port_disp+0x6c>
	else
	PORTB&=~(1<<PORTB1);
 138:	95 b1       	in	r25, 0x05	; 5
 13a:	9d 7f       	andi	r25, 0xFD	; 253
 13c:	95 b9       	out	0x05, r25	; 5
	
	if (a&64)
 13e:	86 ff       	sbrs	r24, 6
 140:	04 c0       	rjmp	.+8      	; 0x14a <port_disp+0x78>
	PORTB|=(1<<PORTB2);
 142:	95 b1       	in	r25, 0x05	; 5
 144:	94 60       	ori	r25, 0x04	; 4
 146:	95 b9       	out	0x05, r25	; 5
 148:	03 c0       	rjmp	.+6      	; 0x150 <port_disp+0x7e>
	else
	PORTB&=~(1<<PORTB2);
 14a:	95 b1       	in	r25, 0x05	; 5
 14c:	9b 7f       	andi	r25, 0xFB	; 251
 14e:	95 b9       	out	0x05, r25	; 5
	
	if (a&128)
 150:	88 23       	and	r24, r24
 152:	24 f4       	brge	.+8      	; 0x15c <port_disp+0x8a>
	PORTB|=(1<<PORTB3);
 154:	85 b1       	in	r24, 0x05	; 5
 156:	88 60       	ori	r24, 0x08	; 8
 158:	85 b9       	out	0x05, r24	; 5
 15a:	08 95       	ret
	else
	PORTB&=~(1<<PORTB3);
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	87 7f       	andi	r24, 0xF7	; 247
 160:	85 b9       	out	0x05, r24	; 5
 162:	08 95       	ret

00000164 <comandos_LCD>:
	comandos_LCD(0b0001);	
}

void comandos_LCD(char a){
	//RS=0;
	PORTD&=~(1<<PORTD2);
 164:	9b b1       	in	r25, 0x0b	; 11
 166:	9b 7f       	andi	r25, 0xFB	; 251
 168:	9b b9       	out	0x0b, r25	; 11
	port_disp(a);
 16a:	0e 94 69 00 	call	0xd2	; 0xd2 <port_disp>
	//enable=1;
	PORTD|=(1<<PORTD3);
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	88 60       	ori	r24, 0x08	; 8
 172:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	8f e7       	ldi	r24, 0x7F	; 127
 176:	9e e3       	ldi	r25, 0x3E	; 62
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <comandos_LCD+0x14>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <comandos_LCD+0x1a>
 17e:	00 00       	nop
	_delay_ms(4);
	//E=0;
	PORTD&=~(1<<PORTD3);
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	87 7f       	andi	r24, 0xF7	; 247
 184:	8b b9       	out	0x0b, r24	; 11
 186:	08 95       	ret

00000188 <initLCD8b>:
 * Created: 1/30/2025 6:05:55 PM
 *  Author: njfg0
 */ 
#include "lcd.h"
void initLCD8b(void){
	DDRD|=(1<<DDD7)|(1<<DDD6)|(1<<DDD5)|(1<<DDD4)|(1<<DDD3)|(1<<DDD2);
 188:	8a b1       	in	r24, 0x0a	; 10
 18a:	8c 6f       	ori	r24, 0xFC	; 252
 18c:	8a b9       	out	0x0a, r24	; 10
	DDRB|=(1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB3);
 18e:	84 b1       	in	r24, 0x04	; 4
 190:	8f 60       	ori	r24, 0x0F	; 15
 192:	84 b9       	out	0x04, r24	; 4
	PORTB=0;
 194:	15 b8       	out	0x05, r1	; 5
	PORTD=0;
 196:	1b b8       	out	0x0b, r1	; 11
	
	port_disp(0x00);
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 69 00 	call	0xd2	; 0xd2 <port_disp>
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	89 ef       	ldi	r24, 0xF9	; 249
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <initLCD8b+0x1c>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <initLCD8b+0x26>
 1ae:	00 00       	nop
	_delay_ms(20);
	
	//function set
	comandos_LCD(0b00111000);
 1b0:	88 e3       	ldi	r24, 0x38	; 56
 1b2:	0e 94 b2 00 	call	0x164	; 0x164 <comandos_LCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	8f e8       	ldi	r24, 0x8F	; 143
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <initLCD8b+0x32>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <initLCD8b+0x38>
 1c0:	00 00       	nop
	_delay_us(100);
	
	//display on/off
	comandos_LCD(0b1100);
 1c2:	8c e0       	ldi	r24, 0x0C	; 12
 1c4:	0e 94 b2 00 	call	0x164	; 0x164 <comandos_LCD>
 1c8:	8f e8       	ldi	r24, 0x8F	; 143
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <initLCD8b+0x44>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <initLCD8b+0x4a>
 1d2:	00 00       	nop
	_delay_us(100);
	
	//Entry mode
	comandos_LCD(0b0110);
 1d4:	86 e0       	ldi	r24, 0x06	; 6
 1d6:	0e 94 b2 00 	call	0x164	; 0x164 <comandos_LCD>
 1da:	8f e8       	ldi	r24, 0x8F	; 143
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <initLCD8b+0x56>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <initLCD8b+0x5c>
 1e4:	00 00       	nop
	_delay_us(100);
	
	//clear display
	comandos_LCD(0b0001);	
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 b2 00 	call	0x164	; 0x164 <comandos_LCD>
 1ec:	08 95       	ret

000001ee <LCD_write_char>:
}

void LCD_write_char(char d){
	//manda y escribe el mensaje
	//RS=1
	PORTD|=(1<<PORTD2);
 1ee:	9b b1       	in	r25, 0x0b	; 11
 1f0:	94 60       	ori	r25, 0x04	; 4
 1f2:	9b b9       	out	0x0b, r25	; 11
	port_disp(d);
 1f4:	0e 94 69 00 	call	0xd2	; 0xd2 <port_disp>
	//E=1
	PORTD|=(1<<PORTD3);
 1f8:	8b b1       	in	r24, 0x0b	; 11
 1fa:	88 60       	ori	r24, 0x08	; 8
 1fc:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fe:	8f e7       	ldi	r24, 0x7F	; 127
 200:	9e e3       	ldi	r25, 0x3E	; 62
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <LCD_write_char+0x14>
 206:	00 c0       	rjmp	.+0      	; 0x208 <LCD_write_char+0x1a>
 208:	00 00       	nop
	_delay_ms(4);
	//E=0
	PORTD&=~(1<<PORTD3);
 20a:	8b b1       	in	r24, 0x0b	; 11
 20c:	87 7f       	andi	r24, 0xF7	; 247
 20e:	8b b9       	out	0x0b, r24	; 11
 210:	08 95       	ret

00000212 <LCD_write_String>:
	
}

void LCD_write_String(char *a){
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	8c 01       	movw	r16, r24
	int i;
	for (i=0;a[i]!='\0';i++)
 21c:	c0 e0       	ldi	r28, 0x00	; 0
 21e:	d0 e0       	ldi	r29, 0x00	; 0
 220:	03 c0       	rjmp	.+6      	; 0x228 <LCD_write_String+0x16>
	LCD_write_char(a[i]);
 222:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_write_char>
	
}

void LCD_write_String(char *a){
	int i;
	for (i=0;a[i]!='\0';i++)
 226:	21 96       	adiw	r28, 0x01	; 1
 228:	f8 01       	movw	r30, r16
 22a:	ec 0f       	add	r30, r28
 22c:	fd 1f       	adc	r31, r29
 22e:	80 81       	ld	r24, Z
 230:	81 11       	cpse	r24, r1
 232:	f7 cf       	rjmp	.-18     	; 0x222 <LCD_write_String+0x10>
	LCD_write_char(a[i]);
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	08 95       	ret

0000023e <LCD_Set_Cursor>:

	
	
void LCD_Set_Cursor(char c, char f){
	char temp;
	if (f==1){
 23e:	61 30       	cpi	r22, 0x01	; 1
 240:	21 f4       	brne	.+8      	; 0x24a <LCD_Set_Cursor+0xc>
		temp=0x80+c;
		comandos_LCD(temp);
 242:	80 58       	subi	r24, 0x80	; 128
 244:	0e 94 b2 00 	call	0x164	; 0x164 <comandos_LCD>
 248:	08 95       	ret
	}else if(f==2){
 24a:	62 30       	cpi	r22, 0x02	; 2
 24c:	19 f4       	brne	.+6      	; 0x254 <LCD_Set_Cursor+0x16>
		temp=0xC0+c;
		comandos_LCD(temp);
 24e:	80 54       	subi	r24, 0x40	; 64
 250:	0e 94 b2 00 	call	0x164	; 0x164 <comandos_LCD>
 254:	08 95       	ret

00000256 <__vector_21>:
uint8_t valor_pot2=0;
uint8_t switch_pot=0;
uint8_t change_value_pot1=0;
uint8_t change_value_pot2=0;

ISR(ADC_vect){
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	8f 93       	push	r24
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
	if (switch_pot==0){
 266:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <switch_pot>
 26a:	81 11       	cpse	r24, r1
 26c:	10 c0       	rjmp	.+32     	; 0x28e <__vector_21+0x38>
		ADMUX=0;
 26e:	ec e7       	ldi	r30, 0x7C	; 124
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	10 82       	st	Z, r1
		ADMUX|=((1<<MUX1)|(1<<MUX2));
 274:	80 81       	ld	r24, Z
 276:	86 60       	ori	r24, 0x06	; 6
 278:	80 83       	st	Z, r24
		valor_pot1=ADCH;
 27a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 27e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <valor_pot1>
		switch_pot=1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <switch_pot>
		change_value_pot1=1;
 288:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <change_value_pot1>
 28c:	0f c0       	rjmp	.+30     	; 0x2ac <__vector_21+0x56>
		}else{
		ADMUX=0;
 28e:	ec e7       	ldi	r30, 0x7C	; 124
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	10 82       	st	Z, r1
		ADMUX|=((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 294:	80 81       	ld	r24, Z
 296:	87 60       	ori	r24, 0x07	; 7
 298:	80 83       	st	Z, r24
		valor_pot2=ADCH;
 29a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 29e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <valor_pot2>
		switch_pot=0;
 2a2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <switch_pot>
		change_value_pot2=1;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	}
	ADCSRA|=(1<<ADIF);
 2ac:	ea e7       	ldi	r30, 0x7A	; 122
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	80 61       	ori	r24, 0x10	; 16
 2b4:	80 83       	st	Z, r24
}
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	8f 91       	pop	r24
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <main>:

int main(void)
{	
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
 2ce:	2e 97       	sbiw	r28, 0x0e	; 14
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	f8 94       	cli
 2d4:	de bf       	out	0x3e, r29	; 62
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	cd bf       	out	0x3d, r28	; 61
	initLCD8b();
 2da:	0e 94 c4 00 	call	0x188	; 0x188 <initLCD8b>
	initadc();
 2de:	0e 94 53 00 	call	0xa6	; 0xa6 <initadc>
	ADCSRA|=(1<<ADSC);
 2e2:	ea e7       	ldi	r30, 0x7A	; 122
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	80 64       	ori	r24, 0x40	; 64
 2ea:	80 83       	st	Z, r24
	sei();
 2ec:	78 94       	sei
	LCD_Set_Cursor(1,1);
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_Set_Cursor>
	LCD_write_String("S1:");
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	0e 94 09 01 	call	0x212	; 0x212 <LCD_write_String>
	LCD_Set_Cursor(7,1);
 2fe:	61 e0       	ldi	r22, 0x01	; 1
 300:	87 e0       	ldi	r24, 0x07	; 7
 302:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_Set_Cursor>
	LCD_write_String("S2:");
 306:	84 e0       	ldi	r24, 0x04	; 4
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 09 01 	call	0x212	; 0x212 <LCD_write_String>
	LCD_Set_Cursor(13,1);
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	8d e0       	ldi	r24, 0x0D	; 13
 312:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_Set_Cursor>
	LCD_write_String("S3:");
 316:	88 e0       	ldi	r24, 0x08	; 8
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 09 01 	call	0x212	; 0x212 <LCD_write_String>
	
	uint16_t prev_valor_pot1 = 255;
	uint16_t prev_valor_pot2 = 255;
 31e:	ee 24       	eor	r14, r14
 320:	ea 94       	dec	r14
 322:	f1 2c       	mov	r15, r1
	LCD_Set_Cursor(7,1);
	LCD_write_String("S2:");
	LCD_Set_Cursor(13,1);
	LCD_write_String("S3:");
	
	uint16_t prev_valor_pot1 = 255;
 324:	2f ef       	ldi	r18, 0xFF	; 255
 326:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t prev_valor_pot2 = 255;
    /* Replace with your application code */
    while (1) 
    {
		if (change_value_pot1==1||change_value_pot2==1){
 328:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <change_value_pot1>
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	21 f0       	breq	.+8      	; 0x338 <main+0x72>
 330:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	c1 f7       	brne	.-16     	; 0x328 <main+0x62>
			change_value_pot1=0;
 338:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <change_value_pot1>
			change_value_pot2=0;
 33c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
			
			//comandos_LCD(0b0001);
			if (valor_pot1 != prev_valor_pot1 || valor_pot2 != prev_valor_pot2) {
 340:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <valor_pot1>
 344:	c6 2e       	mov	r12, r22
 346:	d1 2c       	mov	r13, r1
 348:	2c 15       	cp	r18, r12
 34a:	3d 05       	cpc	r19, r13
 34c:	31 f4       	brne	.+12     	; 0x35a <main+0x94>
 34e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <valor_pot2>
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	e8 16       	cp	r14, r24
 356:	f9 06       	cpc	r15, r25
 358:	39 f3       	breq	.-50     	; 0x328 <main+0x62>
				 prev_valor_pot1 = valor_pot1;
				 prev_valor_pot2 = valor_pot2;
 35a:	e0 90 0f 01 	lds	r14, 0x010F	; 0x80010f <valor_pot2>
 35e:	f1 2c       	mov	r15, r1
			
				float mpot1=(valor_pot1*5.0)/255;
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 8f 03 	call	0x71e	; 0x71e <__floatsisf>
 36a:	20 e0       	ldi	r18, 0x00	; 0
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	40 ea       	ldi	r20, 0xA0	; 160
 370:	50 e4       	ldi	r21, 0x40	; 64
 372:	0e 94 1b 04 	call	0x836	; 0x836 <__mulsf3>
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	4f e7       	ldi	r20, 0x7F	; 127
 37c:	53 e4       	ldi	r21, 0x43	; 67
 37e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__divsf3>
 382:	4b 01       	movw	r8, r22
 384:	5c 01       	movw	r10, r24
				float mpot2=(valor_pot2*5.0)/255;
 386:	b7 01       	movw	r22, r14
 388:	0f 2c       	mov	r0, r15
 38a:	00 0c       	add	r0, r0
 38c:	88 0b       	sbc	r24, r24
 38e:	99 0b       	sbc	r25, r25
 390:	0e 94 8f 03 	call	0x71e	; 0x71e <__floatsisf>
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	40 ea       	ldi	r20, 0xA0	; 160
 39a:	50 e4       	ldi	r21, 0x40	; 64
 39c:	0e 94 1b 04 	call	0x836	; 0x836 <__mulsf3>
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	4f e7       	ldi	r20, 0x7F	; 127
 3a6:	53 e4       	ldi	r21, 0x43	; 67
 3a8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__divsf3>
 3ac:	6b 87       	std	Y+11, r22	; 0x0b
 3ae:	7c 87       	std	Y+12, r23	; 0x0c
 3b0:	8d 87       	std	Y+13, r24	; 0x0d
 3b2:	9e 87       	std	Y+14, r25	; 0x0e
			
				uint16_t enterov1=(int)mpot1;
 3b4:	c5 01       	movw	r24, r10
 3b6:	b4 01       	movw	r22, r8
 3b8:	0e 94 57 03 	call	0x6ae	; 0x6ae <__fixsfsi>
 3bc:	76 2e       	mov	r7, r22
 3be:	67 2d       	mov	r22, r7
				uint16_t decimalv1=(int)((mpot1-enterov1)*100);
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 8d 03 	call	0x71a	; 0x71a <__floatunsisf>
 3c8:	9b 01       	movw	r18, r22
 3ca:	ac 01       	movw	r20, r24
 3cc:	c5 01       	movw	r24, r10
 3ce:	b4 01       	movw	r22, r8
 3d0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__subsf3>
 3d4:	20 e0       	ldi	r18, 0x00	; 0
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	48 ec       	ldi	r20, 0xC8	; 200
 3da:	52 e4       	ldi	r21, 0x42	; 66
 3dc:	0e 94 1b 04 	call	0x836	; 0x836 <__mulsf3>
 3e0:	0e 94 57 03 	call	0x6ae	; 0x6ae <__fixsfsi>
 3e4:	66 2e       	mov	r6, r22
 3e6:	a6 2e       	mov	r10, r22
 3e8:	b7 2e       	mov	r11, r23
			
				uint16_t enterov2=(int)mpot2;
 3ea:	6b 85       	ldd	r22, Y+11	; 0x0b
 3ec:	7c 85       	ldd	r23, Y+12	; 0x0c
 3ee:	8d 85       	ldd	r24, Y+13	; 0x0d
 3f0:	9e 85       	ldd	r25, Y+14	; 0x0e
 3f2:	0e 94 57 03 	call	0x6ae	; 0x6ae <__fixsfsi>
 3f6:	86 2e       	mov	r8, r22
 3f8:	68 2d       	mov	r22, r8
				uint16_t decimalv2=(int)((mpot2-enterov2)*100);
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 8d 03 	call	0x71a	; 0x71a <__floatunsisf>
 402:	9b 01       	movw	r18, r22
 404:	ac 01       	movw	r20, r24
 406:	6b 85       	ldd	r22, Y+11	; 0x0b
 408:	7c 85       	ldd	r23, Y+12	; 0x0c
 40a:	8d 85       	ldd	r24, Y+13	; 0x0d
 40c:	9e 85       	ldd	r25, Y+14	; 0x0e
 40e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__subsf3>
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	48 ec       	ldi	r20, 0xC8	; 200
 418:	52 e4       	ldi	r21, 0x42	; 66
 41a:	0e 94 1b 04 	call	0x836	; 0x836 <__mulsf3>
 41e:	0e 94 57 03 	call	0x6ae	; 0x6ae <__fixsfsi>
 422:	96 2e       	mov	r9, r22
 424:	06 2f       	mov	r16, r22
 426:	17 2f       	mov	r17, r23
			
				char mensaje1[5];
				LCD_Set_Cursor(0,2);
 428:	62 e0       	ldi	r22, 0x02	; 2
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_Set_Cursor>
				mensaje1[0]='0'+enterov1;
 430:	80 e3       	ldi	r24, 0x30	; 48
 432:	87 0d       	add	r24, r7
 434:	8e 83       	std	Y+6, r24	; 0x06
				mensaje1[1]='.';
 436:	0f 2e       	mov	r0, r31
 438:	fe e2       	ldi	r31, 0x2E	; 46
 43a:	7f 2e       	mov	r7, r31
 43c:	f0 2d       	mov	r31, r0
 43e:	7f 82       	std	Y+7, r7	; 0x07
				mensaje1[2]='0'+(decimalv1/1);
 440:	80 e3       	ldi	r24, 0x30	; 48
 442:	86 0d       	add	r24, r6
 444:	88 87       	std	Y+8, r24	; 0x08
				mensaje1[3]='0'+(decimalv1%10);
 446:	95 01       	movw	r18, r10
 448:	ad ec       	ldi	r26, 0xCD	; 205
 44a:	bc ec       	ldi	r27, 0xCC	; 204
 44c:	0e 94 88 04 	call	0x910	; 0x910 <__umulhisi3>
 450:	96 95       	lsr	r25
 452:	87 95       	ror	r24
 454:	96 95       	lsr	r25
 456:	87 95       	ror	r24
 458:	96 95       	lsr	r25
 45a:	87 95       	ror	r24
 45c:	9c 01       	movw	r18, r24
 45e:	22 0f       	add	r18, r18
 460:	33 1f       	adc	r19, r19
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	82 0f       	add	r24, r18
 470:	93 1f       	adc	r25, r19
 472:	95 01       	movw	r18, r10
 474:	28 1b       	sub	r18, r24
 476:	39 0b       	sbc	r19, r25
 478:	c9 01       	movw	r24, r18
 47a:	80 5d       	subi	r24, 0xD0	; 208
 47c:	89 87       	std	Y+9, r24	; 0x09
				mensaje1[4]='V';
 47e:	0f 2e       	mov	r0, r31
 480:	f6 e5       	ldi	r31, 0x56	; 86
 482:	bf 2e       	mov	r11, r31
 484:	f0 2d       	mov	r31, r0
 486:	ba 86       	std	Y+10, r11	; 0x0a
				mensaje1[5]='\0';
 488:	1b 86       	std	Y+11, r1	; 0x0b
				LCD_write_String(mensaje1);
 48a:	ce 01       	movw	r24, r28
 48c:	06 96       	adiw	r24, 0x06	; 6
 48e:	0e 94 09 01 	call	0x212	; 0x212 <LCD_write_String>
			
				char mensaje2[5];
				LCD_Set_Cursor(6,2);
 492:	62 e0       	ldi	r22, 0x02	; 2
 494:	86 e0       	ldi	r24, 0x06	; 6
 496:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_Set_Cursor>
				mensaje2[0]='0'+enterov2;
 49a:	80 e3       	ldi	r24, 0x30	; 48
 49c:	88 0d       	add	r24, r8
 49e:	89 83       	std	Y+1, r24	; 0x01
				mensaje2[1]='.';
 4a0:	7a 82       	std	Y+2, r7	; 0x02
				mensaje2[2]='0'+(decimalv2/1);
 4a2:	80 e3       	ldi	r24, 0x30	; 48
 4a4:	89 0d       	add	r24, r9
 4a6:	8b 83       	std	Y+3, r24	; 0x03
				mensaje2[3]='0'+(decimalv2%10);
 4a8:	98 01       	movw	r18, r16
 4aa:	ad ec       	ldi	r26, 0xCD	; 205
 4ac:	bc ec       	ldi	r27, 0xCC	; 204
 4ae:	0e 94 88 04 	call	0x910	; 0x910 <__umulhisi3>
 4b2:	96 95       	lsr	r25
 4b4:	87 95       	ror	r24
 4b6:	96 95       	lsr	r25
 4b8:	87 95       	ror	r24
 4ba:	96 95       	lsr	r25
 4bc:	87 95       	ror	r24
 4be:	9c 01       	movw	r18, r24
 4c0:	22 0f       	add	r18, r18
 4c2:	33 1f       	adc	r19, r19
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	82 0f       	add	r24, r18
 4d2:	93 1f       	adc	r25, r19
 4d4:	98 01       	movw	r18, r16
 4d6:	28 1b       	sub	r18, r24
 4d8:	39 0b       	sbc	r19, r25
 4da:	c9 01       	movw	r24, r18
 4dc:	80 5d       	subi	r24, 0xD0	; 208
 4de:	8c 83       	std	Y+4, r24	; 0x04
				mensaje2[4]='V';
 4e0:	bd 82       	std	Y+5, r11	; 0x05
				mensaje2[5]='\0';
 4e2:	1e 82       	std	Y+6, r1	; 0x06
				LCD_write_String(mensaje2);
 4e4:	ce 01       	movw	r24, r28
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	0e 94 09 01 	call	0x212	; 0x212 <LCD_write_String>
			change_value_pot1=0;
			change_value_pot2=0;
			
			//comandos_LCD(0b0001);
			if (valor_pot1 != prev_valor_pot1 || valor_pot2 != prev_valor_pot2) {
				 prev_valor_pot1 = valor_pot1;
 4ec:	96 01       	movw	r18, r12
 4ee:	1c cf       	rjmp	.-456    	; 0x328 <main+0x62>

000004f0 <__subsf3>:
 4f0:	50 58       	subi	r21, 0x80	; 128

000004f2 <__addsf3>:
 4f2:	bb 27       	eor	r27, r27
 4f4:	aa 27       	eor	r26, r26
 4f6:	0e 94 90 02 	call	0x520	; 0x520 <__addsf3x>
 4fa:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__fp_round>
 4fe:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__fp_pscA>
 502:	38 f0       	brcs	.+14     	; 0x512 <__addsf3+0x20>
 504:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__fp_pscB>
 508:	20 f0       	brcs	.+8      	; 0x512 <__addsf3+0x20>
 50a:	39 f4       	brne	.+14     	; 0x51a <__addsf3+0x28>
 50c:	9f 3f       	cpi	r25, 0xFF	; 255
 50e:	19 f4       	brne	.+6      	; 0x516 <__addsf3+0x24>
 510:	26 f4       	brtc	.+8      	; 0x51a <__addsf3+0x28>
 512:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__fp_nan>
 516:	0e f4       	brtc	.+2      	; 0x51a <__addsf3+0x28>
 518:	e0 95       	com	r30
 51a:	e7 fb       	bst	r30, 7
 51c:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_inf>

00000520 <__addsf3x>:
 520:	e9 2f       	mov	r30, r25
 522:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__fp_split3>
 526:	58 f3       	brcs	.-42     	; 0x4fe <__addsf3+0xc>
 528:	ba 17       	cp	r27, r26
 52a:	62 07       	cpc	r22, r18
 52c:	73 07       	cpc	r23, r19
 52e:	84 07       	cpc	r24, r20
 530:	95 07       	cpc	r25, r21
 532:	20 f0       	brcs	.+8      	; 0x53c <__addsf3x+0x1c>
 534:	79 f4       	brne	.+30     	; 0x554 <__addsf3x+0x34>
 536:	a6 f5       	brtc	.+104    	; 0x5a0 <__addsf3x+0x80>
 538:	0c 94 14 04 	jmp	0x828	; 0x828 <__fp_zero>
 53c:	0e f4       	brtc	.+2      	; 0x540 <__addsf3x+0x20>
 53e:	e0 95       	com	r30
 540:	0b 2e       	mov	r0, r27
 542:	ba 2f       	mov	r27, r26
 544:	a0 2d       	mov	r26, r0
 546:	0b 01       	movw	r0, r22
 548:	b9 01       	movw	r22, r18
 54a:	90 01       	movw	r18, r0
 54c:	0c 01       	movw	r0, r24
 54e:	ca 01       	movw	r24, r20
 550:	a0 01       	movw	r20, r0
 552:	11 24       	eor	r1, r1
 554:	ff 27       	eor	r31, r31
 556:	59 1b       	sub	r21, r25
 558:	99 f0       	breq	.+38     	; 0x580 <__addsf3x+0x60>
 55a:	59 3f       	cpi	r21, 0xF9	; 249
 55c:	50 f4       	brcc	.+20     	; 0x572 <__addsf3x+0x52>
 55e:	50 3e       	cpi	r21, 0xE0	; 224
 560:	68 f1       	brcs	.+90     	; 0x5bc <__addsf3x+0x9c>
 562:	1a 16       	cp	r1, r26
 564:	f0 40       	sbci	r31, 0x00	; 0
 566:	a2 2f       	mov	r26, r18
 568:	23 2f       	mov	r18, r19
 56a:	34 2f       	mov	r19, r20
 56c:	44 27       	eor	r20, r20
 56e:	58 5f       	subi	r21, 0xF8	; 248
 570:	f3 cf       	rjmp	.-26     	; 0x558 <__addsf3x+0x38>
 572:	46 95       	lsr	r20
 574:	37 95       	ror	r19
 576:	27 95       	ror	r18
 578:	a7 95       	ror	r26
 57a:	f0 40       	sbci	r31, 0x00	; 0
 57c:	53 95       	inc	r21
 57e:	c9 f7       	brne	.-14     	; 0x572 <__addsf3x+0x52>
 580:	7e f4       	brtc	.+30     	; 0x5a0 <__addsf3x+0x80>
 582:	1f 16       	cp	r1, r31
 584:	ba 0b       	sbc	r27, r26
 586:	62 0b       	sbc	r22, r18
 588:	73 0b       	sbc	r23, r19
 58a:	84 0b       	sbc	r24, r20
 58c:	ba f0       	brmi	.+46     	; 0x5bc <__addsf3x+0x9c>
 58e:	91 50       	subi	r25, 0x01	; 1
 590:	a1 f0       	breq	.+40     	; 0x5ba <__addsf3x+0x9a>
 592:	ff 0f       	add	r31, r31
 594:	bb 1f       	adc	r27, r27
 596:	66 1f       	adc	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	88 1f       	adc	r24, r24
 59c:	c2 f7       	brpl	.-16     	; 0x58e <__addsf3x+0x6e>
 59e:	0e c0       	rjmp	.+28     	; 0x5bc <__addsf3x+0x9c>
 5a0:	ba 0f       	add	r27, r26
 5a2:	62 1f       	adc	r22, r18
 5a4:	73 1f       	adc	r23, r19
 5a6:	84 1f       	adc	r24, r20
 5a8:	48 f4       	brcc	.+18     	; 0x5bc <__addsf3x+0x9c>
 5aa:	87 95       	ror	r24
 5ac:	77 95       	ror	r23
 5ae:	67 95       	ror	r22
 5b0:	b7 95       	ror	r27
 5b2:	f7 95       	ror	r31
 5b4:	9e 3f       	cpi	r25, 0xFE	; 254
 5b6:	08 f0       	brcs	.+2      	; 0x5ba <__addsf3x+0x9a>
 5b8:	b0 cf       	rjmp	.-160    	; 0x51a <__addsf3+0x28>
 5ba:	93 95       	inc	r25
 5bc:	88 0f       	add	r24, r24
 5be:	08 f0       	brcs	.+2      	; 0x5c2 <__addsf3x+0xa2>
 5c0:	99 27       	eor	r25, r25
 5c2:	ee 0f       	add	r30, r30
 5c4:	97 95       	ror	r25
 5c6:	87 95       	ror	r24
 5c8:	08 95       	ret

000005ca <__divsf3>:
 5ca:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__divsf3x>
 5ce:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__fp_round>
 5d2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__fp_pscB>
 5d6:	58 f0       	brcs	.+22     	; 0x5ee <__divsf3+0x24>
 5d8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__fp_pscA>
 5dc:	40 f0       	brcs	.+16     	; 0x5ee <__divsf3+0x24>
 5de:	29 f4       	brne	.+10     	; 0x5ea <__divsf3+0x20>
 5e0:	5f 3f       	cpi	r21, 0xFF	; 255
 5e2:	29 f0       	breq	.+10     	; 0x5ee <__divsf3+0x24>
 5e4:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_inf>
 5e8:	51 11       	cpse	r21, r1
 5ea:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_szero>
 5ee:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__fp_nan>

000005f2 <__divsf3x>:
 5f2:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__fp_split3>
 5f6:	68 f3       	brcs	.-38     	; 0x5d2 <__divsf3+0x8>

000005f8 <__divsf3_pse>:
 5f8:	99 23       	and	r25, r25
 5fa:	b1 f3       	breq	.-20     	; 0x5e8 <__divsf3+0x1e>
 5fc:	55 23       	and	r21, r21
 5fe:	91 f3       	breq	.-28     	; 0x5e4 <__divsf3+0x1a>
 600:	95 1b       	sub	r25, r21
 602:	55 0b       	sbc	r21, r21
 604:	bb 27       	eor	r27, r27
 606:	aa 27       	eor	r26, r26
 608:	62 17       	cp	r22, r18
 60a:	73 07       	cpc	r23, r19
 60c:	84 07       	cpc	r24, r20
 60e:	38 f0       	brcs	.+14     	; 0x61e <__divsf3_pse+0x26>
 610:	9f 5f       	subi	r25, 0xFF	; 255
 612:	5f 4f       	sbci	r21, 0xFF	; 255
 614:	22 0f       	add	r18, r18
 616:	33 1f       	adc	r19, r19
 618:	44 1f       	adc	r20, r20
 61a:	aa 1f       	adc	r26, r26
 61c:	a9 f3       	breq	.-22     	; 0x608 <__divsf3_pse+0x10>
 61e:	35 d0       	rcall	.+106    	; 0x68a <__divsf3_pse+0x92>
 620:	0e 2e       	mov	r0, r30
 622:	3a f0       	brmi	.+14     	; 0x632 <__divsf3_pse+0x3a>
 624:	e0 e8       	ldi	r30, 0x80	; 128
 626:	32 d0       	rcall	.+100    	; 0x68c <__divsf3_pse+0x94>
 628:	91 50       	subi	r25, 0x01	; 1
 62a:	50 40       	sbci	r21, 0x00	; 0
 62c:	e6 95       	lsr	r30
 62e:	00 1c       	adc	r0, r0
 630:	ca f7       	brpl	.-14     	; 0x624 <__divsf3_pse+0x2c>
 632:	2b d0       	rcall	.+86     	; 0x68a <__divsf3_pse+0x92>
 634:	fe 2f       	mov	r31, r30
 636:	29 d0       	rcall	.+82     	; 0x68a <__divsf3_pse+0x92>
 638:	66 0f       	add	r22, r22
 63a:	77 1f       	adc	r23, r23
 63c:	88 1f       	adc	r24, r24
 63e:	bb 1f       	adc	r27, r27
 640:	26 17       	cp	r18, r22
 642:	37 07       	cpc	r19, r23
 644:	48 07       	cpc	r20, r24
 646:	ab 07       	cpc	r26, r27
 648:	b0 e8       	ldi	r27, 0x80	; 128
 64a:	09 f0       	breq	.+2      	; 0x64e <__divsf3_pse+0x56>
 64c:	bb 0b       	sbc	r27, r27
 64e:	80 2d       	mov	r24, r0
 650:	bf 01       	movw	r22, r30
 652:	ff 27       	eor	r31, r31
 654:	93 58       	subi	r25, 0x83	; 131
 656:	5f 4f       	sbci	r21, 0xFF	; 255
 658:	3a f0       	brmi	.+14     	; 0x668 <__divsf3_pse+0x70>
 65a:	9e 3f       	cpi	r25, 0xFE	; 254
 65c:	51 05       	cpc	r21, r1
 65e:	78 f0       	brcs	.+30     	; 0x67e <__divsf3_pse+0x86>
 660:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_inf>
 664:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_szero>
 668:	5f 3f       	cpi	r21, 0xFF	; 255
 66a:	e4 f3       	brlt	.-8      	; 0x664 <__divsf3_pse+0x6c>
 66c:	98 3e       	cpi	r25, 0xE8	; 232
 66e:	d4 f3       	brlt	.-12     	; 0x664 <__divsf3_pse+0x6c>
 670:	86 95       	lsr	r24
 672:	77 95       	ror	r23
 674:	67 95       	ror	r22
 676:	b7 95       	ror	r27
 678:	f7 95       	ror	r31
 67a:	9f 5f       	subi	r25, 0xFF	; 255
 67c:	c9 f7       	brne	.-14     	; 0x670 <__divsf3_pse+0x78>
 67e:	88 0f       	add	r24, r24
 680:	91 1d       	adc	r25, r1
 682:	96 95       	lsr	r25
 684:	87 95       	ror	r24
 686:	97 f9       	bld	r25, 7
 688:	08 95       	ret
 68a:	e1 e0       	ldi	r30, 0x01	; 1
 68c:	66 0f       	add	r22, r22
 68e:	77 1f       	adc	r23, r23
 690:	88 1f       	adc	r24, r24
 692:	bb 1f       	adc	r27, r27
 694:	62 17       	cp	r22, r18
 696:	73 07       	cpc	r23, r19
 698:	84 07       	cpc	r24, r20
 69a:	ba 07       	cpc	r27, r26
 69c:	20 f0       	brcs	.+8      	; 0x6a6 <__divsf3_pse+0xae>
 69e:	62 1b       	sub	r22, r18
 6a0:	73 0b       	sbc	r23, r19
 6a2:	84 0b       	sbc	r24, r20
 6a4:	ba 0b       	sbc	r27, r26
 6a6:	ee 1f       	adc	r30, r30
 6a8:	88 f7       	brcc	.-30     	; 0x68c <__divsf3_pse+0x94>
 6aa:	e0 95       	com	r30
 6ac:	08 95       	ret

000006ae <__fixsfsi>:
 6ae:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fixunssfsi>
 6b2:	68 94       	set
 6b4:	b1 11       	cpse	r27, r1
 6b6:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_szero>
 6ba:	08 95       	ret

000006bc <__fixunssfsi>:
 6bc:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__fp_splitA>
 6c0:	88 f0       	brcs	.+34     	; 0x6e4 <__fixunssfsi+0x28>
 6c2:	9f 57       	subi	r25, 0x7F	; 127
 6c4:	98 f0       	brcs	.+38     	; 0x6ec <__fixunssfsi+0x30>
 6c6:	b9 2f       	mov	r27, r25
 6c8:	99 27       	eor	r25, r25
 6ca:	b7 51       	subi	r27, 0x17	; 23
 6cc:	b0 f0       	brcs	.+44     	; 0x6fa <__fixunssfsi+0x3e>
 6ce:	e1 f0       	breq	.+56     	; 0x708 <__fixunssfsi+0x4c>
 6d0:	66 0f       	add	r22, r22
 6d2:	77 1f       	adc	r23, r23
 6d4:	88 1f       	adc	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	1a f0       	brmi	.+6      	; 0x6e0 <__fixunssfsi+0x24>
 6da:	ba 95       	dec	r27
 6dc:	c9 f7       	brne	.-14     	; 0x6d0 <__fixunssfsi+0x14>
 6de:	14 c0       	rjmp	.+40     	; 0x708 <__fixunssfsi+0x4c>
 6e0:	b1 30       	cpi	r27, 0x01	; 1
 6e2:	91 f0       	breq	.+36     	; 0x708 <__fixunssfsi+0x4c>
 6e4:	0e 94 14 04 	call	0x828	; 0x828 <__fp_zero>
 6e8:	b1 e0       	ldi	r27, 0x01	; 1
 6ea:	08 95       	ret
 6ec:	0c 94 14 04 	jmp	0x828	; 0x828 <__fp_zero>
 6f0:	67 2f       	mov	r22, r23
 6f2:	78 2f       	mov	r23, r24
 6f4:	88 27       	eor	r24, r24
 6f6:	b8 5f       	subi	r27, 0xF8	; 248
 6f8:	39 f0       	breq	.+14     	; 0x708 <__fixunssfsi+0x4c>
 6fa:	b9 3f       	cpi	r27, 0xF9	; 249
 6fc:	cc f3       	brlt	.-14     	; 0x6f0 <__fixunssfsi+0x34>
 6fe:	86 95       	lsr	r24
 700:	77 95       	ror	r23
 702:	67 95       	ror	r22
 704:	b3 95       	inc	r27
 706:	d9 f7       	brne	.-10     	; 0x6fe <__fixunssfsi+0x42>
 708:	3e f4       	brtc	.+14     	; 0x718 <__fixunssfsi+0x5c>
 70a:	90 95       	com	r25
 70c:	80 95       	com	r24
 70e:	70 95       	com	r23
 710:	61 95       	neg	r22
 712:	7f 4f       	sbci	r23, 0xFF	; 255
 714:	8f 4f       	sbci	r24, 0xFF	; 255
 716:	9f 4f       	sbci	r25, 0xFF	; 255
 718:	08 95       	ret

0000071a <__floatunsisf>:
 71a:	e8 94       	clt
 71c:	09 c0       	rjmp	.+18     	; 0x730 <__floatsisf+0x12>

0000071e <__floatsisf>:
 71e:	97 fb       	bst	r25, 7
 720:	3e f4       	brtc	.+14     	; 0x730 <__floatsisf+0x12>
 722:	90 95       	com	r25
 724:	80 95       	com	r24
 726:	70 95       	com	r23
 728:	61 95       	neg	r22
 72a:	7f 4f       	sbci	r23, 0xFF	; 255
 72c:	8f 4f       	sbci	r24, 0xFF	; 255
 72e:	9f 4f       	sbci	r25, 0xFF	; 255
 730:	99 23       	and	r25, r25
 732:	a9 f0       	breq	.+42     	; 0x75e <__floatsisf+0x40>
 734:	f9 2f       	mov	r31, r25
 736:	96 e9       	ldi	r25, 0x96	; 150
 738:	bb 27       	eor	r27, r27
 73a:	93 95       	inc	r25
 73c:	f6 95       	lsr	r31
 73e:	87 95       	ror	r24
 740:	77 95       	ror	r23
 742:	67 95       	ror	r22
 744:	b7 95       	ror	r27
 746:	f1 11       	cpse	r31, r1
 748:	f8 cf       	rjmp	.-16     	; 0x73a <__floatsisf+0x1c>
 74a:	fa f4       	brpl	.+62     	; 0x78a <__floatsisf+0x6c>
 74c:	bb 0f       	add	r27, r27
 74e:	11 f4       	brne	.+4      	; 0x754 <__floatsisf+0x36>
 750:	60 ff       	sbrs	r22, 0
 752:	1b c0       	rjmp	.+54     	; 0x78a <__floatsisf+0x6c>
 754:	6f 5f       	subi	r22, 0xFF	; 255
 756:	7f 4f       	sbci	r23, 0xFF	; 255
 758:	8f 4f       	sbci	r24, 0xFF	; 255
 75a:	9f 4f       	sbci	r25, 0xFF	; 255
 75c:	16 c0       	rjmp	.+44     	; 0x78a <__floatsisf+0x6c>
 75e:	88 23       	and	r24, r24
 760:	11 f0       	breq	.+4      	; 0x766 <__floatsisf+0x48>
 762:	96 e9       	ldi	r25, 0x96	; 150
 764:	11 c0       	rjmp	.+34     	; 0x788 <__floatsisf+0x6a>
 766:	77 23       	and	r23, r23
 768:	21 f0       	breq	.+8      	; 0x772 <__floatsisf+0x54>
 76a:	9e e8       	ldi	r25, 0x8E	; 142
 76c:	87 2f       	mov	r24, r23
 76e:	76 2f       	mov	r23, r22
 770:	05 c0       	rjmp	.+10     	; 0x77c <__floatsisf+0x5e>
 772:	66 23       	and	r22, r22
 774:	71 f0       	breq	.+28     	; 0x792 <__floatsisf+0x74>
 776:	96 e8       	ldi	r25, 0x86	; 134
 778:	86 2f       	mov	r24, r22
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	60 e0       	ldi	r22, 0x00	; 0
 77e:	2a f0       	brmi	.+10     	; 0x78a <__floatsisf+0x6c>
 780:	9a 95       	dec	r25
 782:	66 0f       	add	r22, r22
 784:	77 1f       	adc	r23, r23
 786:	88 1f       	adc	r24, r24
 788:	da f7       	brpl	.-10     	; 0x780 <__floatsisf+0x62>
 78a:	88 0f       	add	r24, r24
 78c:	96 95       	lsr	r25
 78e:	87 95       	ror	r24
 790:	97 f9       	bld	r25, 7
 792:	08 95       	ret

00000794 <__fp_inf>:
 794:	97 f9       	bld	r25, 7
 796:	9f 67       	ori	r25, 0x7F	; 127
 798:	80 e8       	ldi	r24, 0x80	; 128
 79a:	70 e0       	ldi	r23, 0x00	; 0
 79c:	60 e0       	ldi	r22, 0x00	; 0
 79e:	08 95       	ret

000007a0 <__fp_nan>:
 7a0:	9f ef       	ldi	r25, 0xFF	; 255
 7a2:	80 ec       	ldi	r24, 0xC0	; 192
 7a4:	08 95       	ret

000007a6 <__fp_pscA>:
 7a6:	00 24       	eor	r0, r0
 7a8:	0a 94       	dec	r0
 7aa:	16 16       	cp	r1, r22
 7ac:	17 06       	cpc	r1, r23
 7ae:	18 06       	cpc	r1, r24
 7b0:	09 06       	cpc	r0, r25
 7b2:	08 95       	ret

000007b4 <__fp_pscB>:
 7b4:	00 24       	eor	r0, r0
 7b6:	0a 94       	dec	r0
 7b8:	12 16       	cp	r1, r18
 7ba:	13 06       	cpc	r1, r19
 7bc:	14 06       	cpc	r1, r20
 7be:	05 06       	cpc	r0, r21
 7c0:	08 95       	ret

000007c2 <__fp_round>:
 7c2:	09 2e       	mov	r0, r25
 7c4:	03 94       	inc	r0
 7c6:	00 0c       	add	r0, r0
 7c8:	11 f4       	brne	.+4      	; 0x7ce <__fp_round+0xc>
 7ca:	88 23       	and	r24, r24
 7cc:	52 f0       	brmi	.+20     	; 0x7e2 <__fp_round+0x20>
 7ce:	bb 0f       	add	r27, r27
 7d0:	40 f4       	brcc	.+16     	; 0x7e2 <__fp_round+0x20>
 7d2:	bf 2b       	or	r27, r31
 7d4:	11 f4       	brne	.+4      	; 0x7da <__fp_round+0x18>
 7d6:	60 ff       	sbrs	r22, 0
 7d8:	04 c0       	rjmp	.+8      	; 0x7e2 <__fp_round+0x20>
 7da:	6f 5f       	subi	r22, 0xFF	; 255
 7dc:	7f 4f       	sbci	r23, 0xFF	; 255
 7de:	8f 4f       	sbci	r24, 0xFF	; 255
 7e0:	9f 4f       	sbci	r25, 0xFF	; 255
 7e2:	08 95       	ret

000007e4 <__fp_split3>:
 7e4:	57 fd       	sbrc	r21, 7
 7e6:	90 58       	subi	r25, 0x80	; 128
 7e8:	44 0f       	add	r20, r20
 7ea:	55 1f       	adc	r21, r21
 7ec:	59 f0       	breq	.+22     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7ee:	5f 3f       	cpi	r21, 0xFF	; 255
 7f0:	71 f0       	breq	.+28     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7f2:	47 95       	ror	r20

000007f4 <__fp_splitA>:
 7f4:	88 0f       	add	r24, r24
 7f6:	97 fb       	bst	r25, 7
 7f8:	99 1f       	adc	r25, r25
 7fa:	61 f0       	breq	.+24     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7fc:	9f 3f       	cpi	r25, 0xFF	; 255
 7fe:	79 f0       	breq	.+30     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 800:	87 95       	ror	r24
 802:	08 95       	ret
 804:	12 16       	cp	r1, r18
 806:	13 06       	cpc	r1, r19
 808:	14 06       	cpc	r1, r20
 80a:	55 1f       	adc	r21, r21
 80c:	f2 cf       	rjmp	.-28     	; 0x7f2 <__fp_split3+0xe>
 80e:	46 95       	lsr	r20
 810:	f1 df       	rcall	.-30     	; 0x7f4 <__fp_splitA>
 812:	08 c0       	rjmp	.+16     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 814:	16 16       	cp	r1, r22
 816:	17 06       	cpc	r1, r23
 818:	18 06       	cpc	r1, r24
 81a:	99 1f       	adc	r25, r25
 81c:	f1 cf       	rjmp	.-30     	; 0x800 <__DATA_REGION_LENGTH__>
 81e:	86 95       	lsr	r24
 820:	71 05       	cpc	r23, r1
 822:	61 05       	cpc	r22, r1
 824:	08 94       	sec
 826:	08 95       	ret

00000828 <__fp_zero>:
 828:	e8 94       	clt

0000082a <__fp_szero>:
 82a:	bb 27       	eor	r27, r27
 82c:	66 27       	eor	r22, r22
 82e:	77 27       	eor	r23, r23
 830:	cb 01       	movw	r24, r22
 832:	97 f9       	bld	r25, 7
 834:	08 95       	ret

00000836 <__mulsf3>:
 836:	0e 94 2e 04 	call	0x85c	; 0x85c <__mulsf3x>
 83a:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__fp_round>
 83e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__fp_pscA>
 842:	38 f0       	brcs	.+14     	; 0x852 <__mulsf3+0x1c>
 844:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__fp_pscB>
 848:	20 f0       	brcs	.+8      	; 0x852 <__mulsf3+0x1c>
 84a:	95 23       	and	r25, r21
 84c:	11 f0       	breq	.+4      	; 0x852 <__mulsf3+0x1c>
 84e:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_inf>
 852:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__fp_nan>
 856:	11 24       	eor	r1, r1
 858:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_szero>

0000085c <__mulsf3x>:
 85c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__fp_split3>
 860:	70 f3       	brcs	.-36     	; 0x83e <__mulsf3+0x8>

00000862 <__mulsf3_pse>:
 862:	95 9f       	mul	r25, r21
 864:	c1 f3       	breq	.-16     	; 0x856 <__mulsf3+0x20>
 866:	95 0f       	add	r25, r21
 868:	50 e0       	ldi	r21, 0x00	; 0
 86a:	55 1f       	adc	r21, r21
 86c:	62 9f       	mul	r22, r18
 86e:	f0 01       	movw	r30, r0
 870:	72 9f       	mul	r23, r18
 872:	bb 27       	eor	r27, r27
 874:	f0 0d       	add	r31, r0
 876:	b1 1d       	adc	r27, r1
 878:	63 9f       	mul	r22, r19
 87a:	aa 27       	eor	r26, r26
 87c:	f0 0d       	add	r31, r0
 87e:	b1 1d       	adc	r27, r1
 880:	aa 1f       	adc	r26, r26
 882:	64 9f       	mul	r22, r20
 884:	66 27       	eor	r22, r22
 886:	b0 0d       	add	r27, r0
 888:	a1 1d       	adc	r26, r1
 88a:	66 1f       	adc	r22, r22
 88c:	82 9f       	mul	r24, r18
 88e:	22 27       	eor	r18, r18
 890:	b0 0d       	add	r27, r0
 892:	a1 1d       	adc	r26, r1
 894:	62 1f       	adc	r22, r18
 896:	73 9f       	mul	r23, r19
 898:	b0 0d       	add	r27, r0
 89a:	a1 1d       	adc	r26, r1
 89c:	62 1f       	adc	r22, r18
 89e:	83 9f       	mul	r24, r19
 8a0:	a0 0d       	add	r26, r0
 8a2:	61 1d       	adc	r22, r1
 8a4:	22 1f       	adc	r18, r18
 8a6:	74 9f       	mul	r23, r20
 8a8:	33 27       	eor	r19, r19
 8aa:	a0 0d       	add	r26, r0
 8ac:	61 1d       	adc	r22, r1
 8ae:	23 1f       	adc	r18, r19
 8b0:	84 9f       	mul	r24, r20
 8b2:	60 0d       	add	r22, r0
 8b4:	21 1d       	adc	r18, r1
 8b6:	82 2f       	mov	r24, r18
 8b8:	76 2f       	mov	r23, r22
 8ba:	6a 2f       	mov	r22, r26
 8bc:	11 24       	eor	r1, r1
 8be:	9f 57       	subi	r25, 0x7F	; 127
 8c0:	50 40       	sbci	r21, 0x00	; 0
 8c2:	9a f0       	brmi	.+38     	; 0x8ea <__mulsf3_pse+0x88>
 8c4:	f1 f0       	breq	.+60     	; 0x902 <__stack+0x3>
 8c6:	88 23       	and	r24, r24
 8c8:	4a f0       	brmi	.+18     	; 0x8dc <__mulsf3_pse+0x7a>
 8ca:	ee 0f       	add	r30, r30
 8cc:	ff 1f       	adc	r31, r31
 8ce:	bb 1f       	adc	r27, r27
 8d0:	66 1f       	adc	r22, r22
 8d2:	77 1f       	adc	r23, r23
 8d4:	88 1f       	adc	r24, r24
 8d6:	91 50       	subi	r25, 0x01	; 1
 8d8:	50 40       	sbci	r21, 0x00	; 0
 8da:	a9 f7       	brne	.-22     	; 0x8c6 <__mulsf3_pse+0x64>
 8dc:	9e 3f       	cpi	r25, 0xFE	; 254
 8de:	51 05       	cpc	r21, r1
 8e0:	80 f0       	brcs	.+32     	; 0x902 <__stack+0x3>
 8e2:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_inf>
 8e6:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_szero>
 8ea:	5f 3f       	cpi	r21, 0xFF	; 255
 8ec:	e4 f3       	brlt	.-8      	; 0x8e6 <__mulsf3_pse+0x84>
 8ee:	98 3e       	cpi	r25, 0xE8	; 232
 8f0:	d4 f3       	brlt	.-12     	; 0x8e6 <__mulsf3_pse+0x84>
 8f2:	86 95       	lsr	r24
 8f4:	77 95       	ror	r23
 8f6:	67 95       	ror	r22
 8f8:	b7 95       	ror	r27
 8fa:	f7 95       	ror	r31
 8fc:	e7 95       	ror	r30
 8fe:	9f 5f       	subi	r25, 0xFF	; 255
 900:	c1 f7       	brne	.-16     	; 0x8f2 <__mulsf3_pse+0x90>
 902:	fe 2b       	or	r31, r30
 904:	88 0f       	add	r24, r24
 906:	91 1d       	adc	r25, r1
 908:	96 95       	lsr	r25
 90a:	87 95       	ror	r24
 90c:	97 f9       	bld	r25, 7
 90e:	08 95       	ret

00000910 <__umulhisi3>:
 910:	a2 9f       	mul	r26, r18
 912:	b0 01       	movw	r22, r0
 914:	b3 9f       	mul	r27, r19
 916:	c0 01       	movw	r24, r0
 918:	a3 9f       	mul	r26, r19
 91a:	70 0d       	add	r23, r0
 91c:	81 1d       	adc	r24, r1
 91e:	11 24       	eor	r1, r1
 920:	91 1d       	adc	r25, r1
 922:	b2 9f       	mul	r27, r18
 924:	70 0d       	add	r23, r0
 926:	81 1d       	adc	r24, r1
 928:	11 24       	eor	r1, r1
 92a:	91 1d       	adc	r25, r1
 92c:	08 95       	ret

0000092e <_exit>:
 92e:	f8 94       	cli

00000930 <__stop_program>:
 930:	ff cf       	rjmp	.-2      	; 0x930 <__stop_program>
